Index: src/main/java/com/project/food_delivery/RequestBodies/ProductData.java
===================================================================
diff --git a/src/main/java/com/project/food_delivery/RequestBodies/ProductData.java b/src/main/java/com/project/food_delivery/RequestBodies/ProductData.java
deleted file mode 100644
--- a/src/main/java/com/project/food_delivery/RequestBodies/ProductData.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ /dev/null	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
@@ -1,13 +0,0 @@
-package com.project.food_delivery.RequestBodies;
-
-import com.project.food_delivery.dtos.ProductMetadataDTO;
-import lombok.Getter;
-import lombok.Setter;
-
-@Setter
-@Getter
-public class ProductData {
-    private ProductMetadataDTO productMetadataDTO;
-    private String place;
-    private String company;
-}
Index: src/main/java/com/project/food_delivery/RequestBodies/UsernameAndAddress.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/RequestBodies/UsernameAndAddress.java b/src/main/java/com/project/food_delivery/dtos/UsernameAndAddressDto.java
rename from src/main/java/com/project/food_delivery/RequestBodies/UsernameAndAddress.java
rename to src/main/java/com/project/food_delivery/dtos/UsernameAndAddressDto.java
--- a/src/main/java/com/project/food_delivery/RequestBodies/UsernameAndAddress.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/dtos/UsernameAndAddressDto.java	(date 1695813476205)
@@ -1,12 +1,10 @@
-package com.project.food_delivery.RequestBodies;
+package com.project.food_delivery.dtos;
 
 
-import lombok.Getter;
-import lombok.Setter;
+import lombok.Data;
 
-@Getter
-@Setter
-public class UsernameAndAddress {
+@Data
+public class UsernameAndAddressDto {
     String username;
-    Integer address_id;
+    Integer addressId;
 }
Index: src/main/java/com/project/food_delivery/dtos/ProductDataDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/dtos/ProductDataDto.java b/src/main/java/com/project/food_delivery/dtos/ProductDataDto.java
new file mode 100644
--- /dev/null	(date 1695813476213)
+++ b/src/main/java/com/project/food_delivery/dtos/ProductDataDto.java	(date 1695813476213)
@@ -0,0 +1,12 @@
+package com.project.food_delivery.dtos;
+
+import lombok.Getter;
+import lombok.Setter;
+
+@Setter
+@Getter
+public class ProductDataDto {
+    private ProductMetadataDto productMetadataDTO;
+    private String place;
+    private String company;
+}
Index: src/main/java/com/project/food_delivery/RequestBodies/PlaceData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/RequestBodies/PlaceData.java b/src/main/java/com/project/food_delivery/dtos/PlaceDataDto.java
rename from src/main/java/com/project/food_delivery/RequestBodies/PlaceData.java
rename to src/main/java/com/project/food_delivery/dtos/PlaceDataDto.java
--- a/src/main/java/com/project/food_delivery/RequestBodies/PlaceData.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/dtos/PlaceDataDto.java	(date 1695813475922)
@@ -1,13 +1,12 @@
-package com.project.food_delivery.RequestBodies;
+package com.project.food_delivery.dtos;
 
-import com.project.food_delivery.dtos.AddressDTO;
 import lombok.Getter;
 import lombok.Setter;
 
 @Setter
 @Getter
-public class PlaceData {
+public class PlaceDataDto {
     String name;
-    AddressDTO address;
+    AddressDto address;
     String placeCategory;
 }
Index: src/main/java/com/project/food_delivery/response_bodies/UserInformation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/response_bodies/UserInformation.java b/src/main/java/com/project/food_delivery/dtos/UserInformationDto.java
rename from src/main/java/com/project/food_delivery/response_bodies/UserInformation.java
rename to src/main/java/com/project/food_delivery/dtos/UserInformationDto.java
--- a/src/main/java/com/project/food_delivery/response_bodies/UserInformation.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/dtos/UserInformationDto.java	(date 1695813476446)
@@ -1,6 +1,5 @@
-package com.project.food_delivery.response_bodies;
+package com.project.food_delivery.dtos;
 
-import com.project.food_delivery.dtos.AddressDTO;
 import lombok.AllArgsConstructor;
 import lombok.Getter;
 import lombok.Setter;
@@ -9,9 +8,9 @@
 @Getter
 @Setter
 @AllArgsConstructor
-public class UserInformation {
+public class UserInformationDto {
     private String username;
     private String email;
     private String phoneNumber;
-    private List<AddressDTO> addressDTOS;
+    private List<AddressDto> addressDTOS;
 }
Index: src/main/java/com/project/food_delivery/models/WeightMeasurement.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.models;\r\n\r\npublic enum WeightMeasurement {\r\n    KILOS,\r\n    GRAMS,\r\n    LITRE;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/models/WeightMeasurement.java b/src/main/java/com/project/food_delivery/models/WeightMeasurement.java
--- a/src/main/java/com/project/food_delivery/models/WeightMeasurement.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/models/WeightMeasurement.java	(date 1696254661368)
@@ -3,5 +3,6 @@
 public enum WeightMeasurement {
     KILOS,
     GRAMS,
-    LITRE;
+    LITRE,
+    kg;
 }
Index: src/main/java/com/project/food_delivery/models/ProductMetadata.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.models;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.*;\r\n\r\n\r\n@Entity\r\n@Table(name = \"product_metadata\")\r\n@RequiredArgsConstructor\r\n@ToString\r\n@Getter\r\n@Setter\r\npublic class ProductMetadata {\r\n    @Id\r\n    @Column(name = \"id\")\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    @Column(name = \"name\")\r\n    private String name;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"product_category_id\", referencedColumnName = \"id\")\r\n    private ProductCategory productCategory;\r\n\r\n    @OneToOne\r\n    @JoinColumn(name = \"product_characteristics_id\", referencedColumnName = \"id\")\r\n    private ProductCharacteristic productCharacteristic;\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/models/ProductMetadata.java b/src/main/java/com/project/food_delivery/models/ProductMetadata.java
--- a/src/main/java/com/project/food_delivery/models/ProductMetadata.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/models/ProductMetadata.java	(date 1696256809586)
@@ -3,6 +3,8 @@
 import jakarta.persistence.*;
 import lombok.*;
 
+import java.util.List;
+
 
 @Entity
 @Table(name = "product_metadata")
@@ -27,4 +29,17 @@
     @JoinColumn(name = "product_characteristics_id", referencedColumnName = "id")
     private ProductCharacteristic productCharacteristic;
 
+    @ManyToMany( cascade = {
+            CascadeType.MERGE,
+            CascadeType.PERSIST
+    })
+    @JoinTable(name = "products_join_companies",
+    joinColumns = {
+            @JoinColumn(name = "product_id", referencedColumnName = "id")
+    },
+    inverseJoinColumns = {
+            @JoinColumn(name = "company_id", referencedColumnName = "id")
+    })
+    private List<Company> companies;
+
 }
Index: src/main/java/com/project/food_delivery/models/ProductCharacteristic.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.models;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.*;\r\n\r\n@Entity\r\n@Table(name = \"product_characteristics\")\r\n@RequiredArgsConstructor\r\n@ToString\r\n@Getter\r\n@Setter\r\npublic class ProductCharacteristic {\r\n    @Id\r\n    @Column(name = \"id\")\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    @Column(name = \"price\")\r\n    private Float price;\r\n\r\n    @Column(name = \"weight\")\r\n    private Float weight;\r\n\r\n    @Column(name = \"available_amount\")\r\n    private Integer availableAmount;\r\n\r\n    @Column(name = \"weight_measurement\")\r\n    @Enumerated(EnumType.STRING)\r\n    private WeightMeasurement weightMeasurement;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/models/ProductCharacteristic.java b/src/main/java/com/project/food_delivery/models/ProductCharacteristic.java
--- a/src/main/java/com/project/food_delivery/models/ProductCharacteristic.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/models/ProductCharacteristic.java	(date 1695805894121)
@@ -16,10 +16,10 @@
     private Integer id;
 
     @Column(name = "price")
-    private Float price;
+    private Double price;
 
     @Column(name = "weight")
-    private Float weight;
+    private Double weight;
 
     @Column(name = "available_amount")
     private Integer availableAmount;
Index: src/main/java/com/project/food_delivery/models/ProductCategoryDescription.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.models;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.*;\r\n\r\n@Entity\r\n@Table(name = \"product_categories_descriptions\")\r\n@RequiredArgsConstructor\r\n@ToString\r\n@Getter\r\n@Setter\r\npublic class ProductCategoryDescription {\r\n    @Id\r\n    @Column(name = \"id\")\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    public ProductCategoryDescription(String categoryDescription) {\r\n        this.categoryDescription = categoryDescription;\r\n    }\r\n\r\n    @Column(name = \"category_description\")\r\n    private String categoryDescription;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/models/ProductCategoryDescription.java b/src/main/java/com/project/food_delivery/models/ProductCategoryDescription.java
--- a/src/main/java/com/project/food_delivery/models/ProductCategoryDescription.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/models/ProductCategoryDescription.java	(date 1695807315144)
@@ -15,7 +15,7 @@
     @GeneratedValue(strategy = GenerationType.IDENTITY)
     private Integer id;
 
-    public ProductCategoryDescription(String categoryDescription) {
+     public ProductCategoryDescription(String categoryDescription) {
         this.categoryDescription = categoryDescription;
     }
 
Index: src/main/java/com/project/food_delivery/models/Company.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.models;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.*;\r\n\r\n@Entity\r\n@Table(name = \"companies\")\r\n@RequiredArgsConstructor\r\n@ToString\r\n@Getter\r\n@Setter\r\npublic class Company {\r\n    @Id\r\n    @Column(name = \"id\")\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    @Column(name = \"name\")\r\n    private String name;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/models/Company.java b/src/main/java/com/project/food_delivery/models/Company.java
--- a/src/main/java/com/project/food_delivery/models/Company.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/models/Company.java	(date 1696273614888)
@@ -3,6 +3,8 @@
 import jakarta.persistence.*;
 import lombok.*;
 
+import java.util.List;
+
 @Entity
 @Table(name = "companies")
 @RequiredArgsConstructor
@@ -17,4 +19,8 @@
 
     @Column(name = "name")
     private String name;
+
+    @ManyToMany(mappedBy = "companies")
+    @ToString.Exclude
+    private List<ProductMetadata> productMetadata;
 }
Index: src/main/java/com/project/food_delivery/models/Basket.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.models;\r\n\r\nimport com.project.food_delivery.dtos.ProductMetadataDTO;\r\nimport lombok.Getter;\r\nimport lombok.Setter;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\n@Getter\r\n@Setter\r\npublic class Basket {\r\n    private HashMap<Place, List<ProductMetadataDTO>> basketHashMap;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/models/Basket.java b/src/main/java/com/project/food_delivery/models/Basket.java
--- a/src/main/java/com/project/food_delivery/models/Basket.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/models/Basket.java	(date 1695812507885)
@@ -1,6 +1,6 @@
 package com.project.food_delivery.models;
 
-import com.project.food_delivery.dtos.ProductMetadataDTO;
+import com.project.food_delivery.dtos.ProductMetadataDto;
 import lombok.Getter;
 import lombok.Setter;
 
@@ -10,5 +10,5 @@
 @Getter
 @Setter
 public class Basket {
-    private HashMap<Place, List<ProductMetadataDTO>> basketHashMap;
+    private HashMap<Place, List<ProductMetadataDto>> basketHashMap;
 }
Index: src/main/java/com/project/food_delivery/models/Order.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.models;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.*;\r\n\r\nimport java.time.LocalDateTime;\r\n\r\n@Entity\r\n@Table(name = \"orders\")\r\n@RequiredArgsConstructor\r\n@ToString\r\n@Getter\r\n@Setter\r\npublic class Order {\r\n    @Id\r\n    @Column(name = \"id\")\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    @Column(name = \"date_and_time\")\r\n    private LocalDateTime dateAndTime;\r\n\r\n    @Column(name = \"price\")\r\n    private Float price;\r\n\r\n    @Column(name = \"payment_type\")\r\n    @Enumerated(EnumType.STRING)\r\n    private Payment payment;\r\n\r\n    @Column(name = \"status\")\r\n    @Enumerated(EnumType.STRING)\r\n    private Status status;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"user_id\", referencedColumnName = \"id\")\r\n    private User user;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/models/Order.java b/src/main/java/com/project/food_delivery/models/Order.java
--- a/src/main/java/com/project/food_delivery/models/Order.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/models/Order.java	(date 1695805716388)
@@ -21,7 +21,7 @@
     private LocalDateTime dateAndTime;
 
     @Column(name = "price")
-    private Float price;
+    private Double price;
 
     @Column(name = "payment_type")
     @Enumerated(EnumType.STRING)
Index: src/main/java/com/project/food_delivery/dtos/OrderDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.dtos;\r\n\r\nimport com.project.food_delivery.models.Payment;\r\nimport com.project.food_delivery.models.Status;\r\nimport lombok.Getter;\r\nimport lombok.Setter;\r\n\r\nimport java.time.LocalDateTime;\r\n\r\n@Getter\r\n@Setter\r\npublic class OrderDto {\r\n    private LocalDateTime dateAndTime;\r\n    private Float price;\r\n    private Payment payment;\r\n    private Status status;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/dtos/OrderDto.java b/src/main/java/com/project/food_delivery/dtos/OrderDto.java
--- a/src/main/java/com/project/food_delivery/dtos/OrderDto.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/dtos/OrderDto.java	(date 1695805716400)
@@ -2,16 +2,13 @@
 
 import com.project.food_delivery.models.Payment;
 import com.project.food_delivery.models.Status;
-import lombok.Getter;
-import lombok.Setter;
-
+import lombok.Data;
 import java.time.LocalDateTime;
 
-@Getter
-@Setter
+@Data
 public class OrderDto {
     private LocalDateTime dateAndTime;
-    private Float price;
+    private Double price;
     private Payment payment;
     private Status status;
 }
Index: src/main/java/com/project/food_delivery/models/Address.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.models;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.*;\r\n\r\n@Entity\r\n@Table(name = \"addresses\")\r\n@AllArgsConstructor\r\n@RequiredArgsConstructor\r\n@ToString\r\n@Getter\r\n@Setter\r\npublic class Address {\r\n    @Id\r\n    @Column(name = \"id\")\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    @Column(name = \"city\")\r\n    private String city;\r\n\r\n    @Column(name = \"street\")\r\n    private String street;\r\n\r\n    @Column(name = \"building_num\")\r\n    private String buildingNum;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/models/Address.java b/src/main/java/com/project/food_delivery/models/Address.java
--- a/src/main/java/com/project/food_delivery/models/Address.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/models/Address.java	(date 1695813996632)
@@ -1,7 +1,12 @@
 package com.project.food_delivery.models;
 
+
 import jakarta.persistence.*;
-import lombok.*;
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.RequiredArgsConstructor;
+import lombok.ToString;
+import lombok.Setter;
 
 @Entity
 @Table(name = "addresses")
Index: src/main/java/com/project/food_delivery/services/ProductCategoryDescriptionServiceImplements.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.services;\r\n\r\nimport com.project.food_delivery.models.ProductCategoryDescription;\r\nimport com.project.food_delivery.repositories.ProductCategoryDescriptionRepository;\r\nimport lombok.AllArgsConstructor;\r\nimport org.springframework.stereotype.Service;\r\n\r\n@Service\r\n@AllArgsConstructor\r\npublic class ProductCategoryDescriptionServiceImplements implements ProductCategoryDescriptionService{\r\n    private final ProductCategoryDescriptionRepository productCategoryDescriptionRepository;\r\n    @Override\r\n    public void addDescription(String description) {\r\n        productCategoryDescriptionRepository.save(new ProductCategoryDescription(description));\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/services/ProductCategoryDescriptionServiceImplements.java b/src/main/java/com/project/food_delivery/services/ProductCategoryDescriptionServiceImplements.java
--- a/src/main/java/com/project/food_delivery/services/ProductCategoryDescriptionServiceImplements.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/services/ProductCategoryDescriptionServiceImplements.java	(date 1695800203431)
@@ -11,6 +11,8 @@
     private final ProductCategoryDescriptionRepository productCategoryDescriptionRepository;
     @Override
     public void addDescription(String description) {
-        productCategoryDescriptionRepository.save(new ProductCategoryDescription(description));
+        if (productCategoryDescriptionRepository.findByCategoryDescription(description).isEmpty()){
+            productCategoryDescriptionRepository.save(new ProductCategoryDescription(description));
+        }
     }
 }
Index: src/main/java/com/project/food_delivery/RequestBodies/ProductCategoryAndDescription.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/RequestBodies/ProductCategoryAndDescription.java b/src/main/java/com/project/food_delivery/dtos/ProductCategoryAndDescriptionDto.java
rename from src/main/java/com/project/food_delivery/RequestBodies/ProductCategoryAndDescription.java
rename to src/main/java/com/project/food_delivery/dtos/ProductCategoryAndDescriptionDto.java
--- a/src/main/java/com/project/food_delivery/RequestBodies/ProductCategoryAndDescription.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/dtos/ProductCategoryAndDescriptionDto.java	(date 1695813476439)
@@ -1,11 +1,11 @@
-package com.project.food_delivery.RequestBodies;
+package com.project.food_delivery.dtos;
 
 import lombok.Getter;
 import lombok.Setter;
 
 @Getter
 @Setter
-public class ProductCategoryAndDescription {
+public class ProductCategoryAndDescriptionDto {
     private String category;
     private String description;
 }
Index: src/main/java/com/project/food_delivery/repositories/ProductCategoryDescriptionRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.repositories;\r\n\r\nimport com.project.food_delivery.models.ProductCategoryDescription;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.stereotype.Repository;\r\n\r\n@Repository\r\npublic interface ProductCategoryDescriptionRepository extends JpaRepository<ProductCategoryDescription, Integer> {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/repositories/ProductCategoryDescriptionRepository.java b/src/main/java/com/project/food_delivery/repositories/ProductCategoryDescriptionRepository.java
--- a/src/main/java/com/project/food_delivery/repositories/ProductCategoryDescriptionRepository.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/repositories/ProductCategoryDescriptionRepository.java	(date 1695800203489)
@@ -3,7 +3,9 @@
 import com.project.food_delivery.models.ProductCategoryDescription;
 import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.stereotype.Repository;
+import java.util.Optional;
 
 @Repository
 public interface ProductCategoryDescriptionRepository extends JpaRepository<ProductCategoryDescription, Integer> {
+    Optional<ProductCategoryDescription> findByCategoryDescription(String categoryDescription);
 }
Index: src/main/java/com/project/food_delivery/services/UserJoinAddressServiceImplements.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.services;\r\n\r\nimport com.project.food_delivery.RequestBodies.UsernameAndAddress;\r\nimport com.project.food_delivery.dtos.AddressDTO;\r\nimport com.project.food_delivery.mapper_interfaces.AddressMapper;\r\nimport com.project.food_delivery.models.Address;\r\nimport com.project.food_delivery.models.User;\r\nimport com.project.food_delivery.models.UsersJoinAddresses;\r\nimport com.project.food_delivery.repositories.UserJoinAddressRepository;\r\nimport com.project.food_delivery.response_bodies.UserInformation;\r\nimport lombok.AllArgsConstructor;\r\nimport org.springframework.stereotype.Service;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\n@Service\r\n@AllArgsConstructor\r\npublic class UserJoinAddressServiceImplements implements UserJoinAddressService{\r\n    private final UserJoinAddressRepository userJoinAddressRepository;\r\n    private final AddressMapper addressMapper;\r\n    private final UserService userService;\r\n    private final AddressService addressService;\r\n    @Override\r\n    public UserInformation findUserInformationByUsername(String username) {\r\n        List<UsersJoinAddresses> userJoinAddresses = userJoinAddressRepository.findAllByUser_Username(username);\r\n        List<AddressDTO> addressDTOS = userJoinAddresses.stream()\r\n                .map(usersJoinAddresses -> addressMapper.addressToDTO(usersJoinAddresses.getAddress())).toList();\r\n        User user =  userJoinAddresses.get(0).getUser();\r\n        return new UserInformation(user.getUsername(), user.getEmail(), user.getPhoneNumber(), addressDTOS);\r\n    }\r\n\r\n    @Override\r\n    public AddressDTO changeUserAddressByUsername(String username, AddressDTO address, Integer address_id) {\r\n        Optional<UsersJoinAddresses> usersJoinAddresses = userJoinAddressRepository\r\n                .findByUser_UsernameAndAddress_Id(username, address_id);\r\n        if (usersJoinAddresses.isPresent()){\r\n            User user = userService.getUserByUsername(username);\r\n            userJoinAddressRepository.save(new UsersJoinAddresses(usersJoinAddresses.get().getId(), user,\r\n                    new Address(address_id, address.getCity(), address.getCity(), address.getBuildingNum())));\r\n        }\r\n        return addressMapper.addressToDTO(\r\n                userJoinAddressRepository.findByUser_UsernameAndAddress_Id(username, address_id).get().getAddress());\r\n    }\r\n\r\n    @Override\r\n    public void addUserAddressByUsername(String username, AddressDTO addressDTO) {\r\n        if (userService.isUserExists(username)){\r\n            addressService.addNewAddress(addressDTO);\r\n            userJoinAddressRepository.save(new UsersJoinAddresses(userService.getUserByUsername(username),\r\n                    addressMapper.addressDTOToModel(addressDTO)));\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public void deleteUserAddressByUsername(UsernameAndAddress usernameAndAddress) {\r\n        if (userJoinAddressRepository.findByUser_UsernameAndAddress_Id(usernameAndAddress.getUsername(),\r\n                usernameAndAddress.getAddress_id()).isPresent()){\r\n            addressService.deleteAddressById(usernameAndAddress.getAddress_id());\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/services/UserJoinAddressServiceImplements.java b/src/main/java/com/project/food_delivery/services/UserJoinAddressServiceImplements.java
--- a/src/main/java/com/project/food_delivery/services/UserJoinAddressServiceImplements.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/services/UserJoinAddressServiceImplements.java	(date 1695813476462)
@@ -1,13 +1,14 @@
 package com.project.food_delivery.services;
 
-import com.project.food_delivery.RequestBodies.UsernameAndAddress;
-import com.project.food_delivery.dtos.AddressDTO;
+import com.project.food_delivery.dtos.AddressDto;
+import com.project.food_delivery.dtos.UsernameAndAddressDto;
+import com.project.food_delivery.exceptions.ApiRequestExceptionNotFound;
 import com.project.food_delivery.mapper_interfaces.AddressMapper;
 import com.project.food_delivery.models.Address;
 import com.project.food_delivery.models.User;
 import com.project.food_delivery.models.UsersJoinAddresses;
 import com.project.food_delivery.repositories.UserJoinAddressRepository;
-import com.project.food_delivery.response_bodies.UserInformation;
+import com.project.food_delivery.dtos.UserInformationDto;
 import lombok.AllArgsConstructor;
 import org.springframework.stereotype.Service;
 import java.util.List;
@@ -21,42 +22,52 @@
     private final UserService userService;
     private final AddressService addressService;
     @Override
-    public UserInformation findUserInformationByUsername(String username) {
+    public UserInformationDto findUserInformationByUsername(String username) {
         List<UsersJoinAddresses> userJoinAddresses = userJoinAddressRepository.findAllByUser_Username(username);
-        List<AddressDTO> addressDTOS = userJoinAddresses.stream()
+        if (userJoinAddresses.isEmpty()){
+            throw new ApiRequestExceptionNotFound("Information is not found");
+        }
+        List<AddressDto> addressDTOS = userJoinAddresses.stream()
                 .map(usersJoinAddresses -> addressMapper.addressToDTO(usersJoinAddresses.getAddress())).toList();
         User user =  userJoinAddresses.get(0).getUser();
-        return new UserInformation(user.getUsername(), user.getEmail(), user.getPhoneNumber(), addressDTOS);
+        return new UserInformationDto(user.getUsername(), user.getEmail(), user.getPhoneNumber(), addressDTOS);
     }
 
     @Override
-    public AddressDTO changeUserAddressByUsername(String username, AddressDTO address, Integer address_id) {
+    public AddressDto changeUserAddressByUsername(String username, AddressDto address, Integer address_id) {
         Optional<UsersJoinAddresses> usersJoinAddresses = userJoinAddressRepository
                 .findByUser_UsernameAndAddress_Id(username, address_id);
         if (usersJoinAddresses.isPresent()){
             User user = userService.getUserByUsername(username);
             userJoinAddressRepository.save(new UsersJoinAddresses(usersJoinAddresses.get().getId(), user,
                     new Address(address_id, address.getCity(), address.getCity(), address.getBuildingNum())));
-        }
-        return addressMapper.addressToDTO(
-                userJoinAddressRepository.findByUser_UsernameAndAddress_Id(username, address_id).get().getAddress());
+            return addressMapper.addressToDTO(
+                    userJoinAddressRepository.findByUser_UsernameAndAddress_Id(username, address_id).get().getAddress());
+        }else {
+            throw new ApiRequestExceptionNotFound("User information is not found");
+        }
+
     }
 
     @Override
-    public void addUserAddressByUsername(String username, AddressDTO addressDTO) {
+    public void addUserAddressByUsername(String username, AddressDto addressDTO) {
         if (userService.isUserExists(username)){
             addressService.addNewAddress(addressDTO);
             userJoinAddressRepository.save(new UsersJoinAddresses(userService.getUserByUsername(username),
                     addressMapper.addressDTOToModel(addressDTO)));
+        }else {
+            throw new ApiRequestExceptionNotFound("User is not found");
         }
 
     }
 
     @Override
-    public void deleteUserAddressByUsername(UsernameAndAddress usernameAndAddress) {
+    public void deleteUserAddressByUsername(UsernameAndAddressDto usernameAndAddress) {
         if (userJoinAddressRepository.findByUser_UsernameAndAddress_Id(usernameAndAddress.getUsername(),
-                usernameAndAddress.getAddress_id()).isPresent()){
-            addressService.deleteAddressById(usernameAndAddress.getAddress_id());
+                usernameAndAddress.getAddressId()).isPresent()){
+            addressService.deleteAddressById(usernameAndAddress.getAddressId());
+        }else {
+            throw new ApiRequestExceptionNotFound("User or address is not found");
         }
     }
 }
Index: src/main/java/com/project/food_delivery/services/UserJoinAddressService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.services;\r\n\r\nimport com.project.food_delivery.RequestBodies.UsernameAndAddress;\r\nimport com.project.food_delivery.dtos.AddressDTO;\r\nimport com.project.food_delivery.models.Address;\r\nimport com.project.food_delivery.response_bodies.UserInformation;\r\n\r\npublic interface UserJoinAddressService {\r\n    UserInformation findUserInformationByUsername(String username);\r\n    AddressDTO changeUserAddressByUsername(String username, AddressDTO address, Integer address_id);\r\n    void addUserAddressByUsername(String username, AddressDTO addressDTO);\r\n    void deleteUserAddressByUsername(UsernameAndAddress usernameAndAddress);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/services/UserJoinAddressService.java b/src/main/java/com/project/food_delivery/services/UserJoinAddressService.java
--- a/src/main/java/com/project/food_delivery/services/UserJoinAddressService.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/services/UserJoinAddressService.java	(date 1695813476366)
@@ -1,13 +1,12 @@
 package com.project.food_delivery.services;
 
-import com.project.food_delivery.RequestBodies.UsernameAndAddress;
-import com.project.food_delivery.dtos.AddressDTO;
-import com.project.food_delivery.models.Address;
-import com.project.food_delivery.response_bodies.UserInformation;
+import com.project.food_delivery.dtos.AddressDto;
+import com.project.food_delivery.dtos.UsernameAndAddressDto;
+import com.project.food_delivery.dtos.UserInformationDto;
 
 public interface UserJoinAddressService {
-    UserInformation findUserInformationByUsername(String username);
-    AddressDTO changeUserAddressByUsername(String username, AddressDTO address, Integer address_id);
-    void addUserAddressByUsername(String username, AddressDTO addressDTO);
-    void deleteUserAddressByUsername(UsernameAndAddress usernameAndAddress);
+    UserInformationDto findUserInformationByUsername(String username);
+    AddressDto changeUserAddressByUsername(String username, AddressDto address, Integer address_id);
+    void addUserAddressByUsername(String username, AddressDto addressDTO);
+    void deleteUserAddressByUsername(UsernameAndAddressDto usernameAndAddress);
 }
Index: src/main/java/com/project/food_delivery/services/CompanyServiceImplements.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.services;\r\n\r\nimport com.project.food_delivery.dtos.CompanyDTO;\r\nimport com.project.food_delivery.mapper_interfaces.CompanyMapper;\r\nimport com.project.food_delivery.repositories.CompanyRepository;\r\nimport lombok.AllArgsConstructor;\r\nimport org.springframework.stereotype.Service;\r\n\r\n@Service\r\n@AllArgsConstructor\r\npublic class CompanyServiceImplements implements CompanyService{\r\n    private final CompanyRepository companyRepository;\r\n    private final CompanyMapper companyMapper;\r\n    @Override\r\n    public void addNewCompanyIfNotExist(CompanyDTO companyDTO) {\r\n        if (companyRepository.findByName(companyDTO.getName()).isEmpty()){\r\n            companyRepository.save(companyMapper.companyDTOToModel(companyDTO));\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/services/CompanyServiceImplements.java b/src/main/java/com/project/food_delivery/services/CompanyServiceImplements.java
--- a/src/main/java/com/project/food_delivery/services/CompanyServiceImplements.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/services/CompanyServiceImplements.java	(date 1695813476308)
@@ -1,6 +1,6 @@
 package com.project.food_delivery.services;
 
-import com.project.food_delivery.dtos.CompanyDTO;
+import com.project.food_delivery.dtos.CompanyDto;
 import com.project.food_delivery.mapper_interfaces.CompanyMapper;
 import com.project.food_delivery.repositories.CompanyRepository;
 import lombok.AllArgsConstructor;
@@ -12,7 +12,7 @@
     private final CompanyRepository companyRepository;
     private final CompanyMapper companyMapper;
     @Override
-    public void addNewCompanyIfNotExist(CompanyDTO companyDTO) {
+    public void addNewCompanyIfNotExist(CompanyDto companyDTO) {
         if (companyRepository.findByName(companyDTO.getName()).isEmpty()){
             companyRepository.save(companyMapper.companyDTOToModel(companyDTO));
         }
Index: src/main/java/com/project/food_delivery/services/CompanyService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.services;\r\n\r\nimport com.project.food_delivery.dtos.CompanyDTO;\r\n\r\npublic interface CompanyService {\r\n    void addNewCompanyIfNotExist(CompanyDTO companyDTO);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/services/CompanyService.java b/src/main/java/com/project/food_delivery/services/CompanyService.java
--- a/src/main/java/com/project/food_delivery/services/CompanyService.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/services/CompanyService.java	(date 1695813475835)
@@ -1,7 +1,7 @@
 package com.project.food_delivery.services;
 
-import com.project.food_delivery.dtos.CompanyDTO;
+import com.project.food_delivery.dtos.CompanyDto;
 
 public interface CompanyService {
-    void addNewCompanyIfNotExist(CompanyDTO companyDTO);
+    void addNewCompanyIfNotExist(CompanyDto companyDTO);
 }
Index: src/main/java/com/project/food_delivery/services/ProductJoinCompanyServiceImplements.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.services;\r\n\r\nimport com.project.food_delivery.dtos.CompanyDTO;\r\nimport com.project.food_delivery.dtos.ProductJoinCompanyDTO;\r\nimport com.project.food_delivery.dtos.ProductMetadataDTO;\r\nimport com.project.food_delivery.mapper_interfaces.CompanyMapper;\r\nimport com.project.food_delivery.mapper_interfaces.ProductJoinCompanyMapper;\r\nimport com.project.food_delivery.mapper_interfaces.ProductMetadataMapper;\r\nimport com.project.food_delivery.models.ProductsJoinCompanies;\r\nimport com.project.food_delivery.repositories.ProductJoinCompanyRepository;\r\nimport lombok.AllArgsConstructor;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.List;\r\n\r\n@Service\r\n@AllArgsConstructor\r\npublic class ProductJoinCompanyServiceImplements implements ProductJoinCompanyService{\r\n    private final ProductJoinCompanyRepository productJoinCompanyRepository;\r\n    private final ProductJoinCompanyMapper productJoinCompanyMapper;\r\n    private final ProductMetadataMapper productMetadataMapper;\r\n    private final CompanyMapper companyMapper;\r\n    @Override\r\n    public List<ProductJoinCompanyDTO> findProductInformationByProductCategory(String category) {\r\n        List<ProductsJoinCompanies> productsJoinCompanies = productJoinCompanyRepository.findAllByProductMetadata_ProductCategory_ProductCategory(category);\r\n        return productsJoinCompanies.stream().map(productJoinCompanyMapper::productJoinCompanyToDTO).toList();\r\n    }\r\n\r\n    @Override\r\n    public void addNewInformation(CompanyDTO companyDTO, ProductMetadataDTO productMetadataDTO) {\r\n        productJoinCompanyRepository.save(new ProductsJoinCompanies(\r\n                productMetadataMapper.productMetadataToModel(productMetadataDTO),\r\n                companyMapper.companyDTOToModel(companyDTO)));\r\n    }\r\n\r\n    @Override\r\n    public boolean isDataExists(CompanyDTO companyDTO, ProductMetadataDTO productMetadataDTO) {\r\n        List<ProductsJoinCompanies> productsJoinCompanies = productJoinCompanyRepository\r\n                .findAllByProductMetadata(productMetadataMapper.productMetadataToModel(productMetadataDTO));\r\n        boolean isFound = false;\r\n        for (ProductsJoinCompanies temp: productsJoinCompanies){\r\n            if (companyMapper.companyToDTO(temp.getCompany()) == companyDTO){\r\n                isFound = true;\r\n                break;\r\n            }\r\n        }\r\n        return isFound;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/services/ProductJoinCompanyServiceImplements.java b/src/main/java/com/project/food_delivery/services/ProductJoinCompanyServiceImplements.java
--- a/src/main/java/com/project/food_delivery/services/ProductJoinCompanyServiceImplements.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/services/ProductJoinCompanyServiceImplements.java	(date 1695813476348)
@@ -1,8 +1,9 @@
 package com.project.food_delivery.services;
 
-import com.project.food_delivery.dtos.CompanyDTO;
-import com.project.food_delivery.dtos.ProductJoinCompanyDTO;
-import com.project.food_delivery.dtos.ProductMetadataDTO;
+import com.project.food_delivery.dtos.CompanyDto;
+import com.project.food_delivery.dtos.ProductJoinCompanyDto;
+import com.project.food_delivery.dtos.ProductMetadataDto;
+import com.project.food_delivery.exceptions.ApiRequestExceptionNotFound;
 import com.project.food_delivery.mapper_interfaces.CompanyMapper;
 import com.project.food_delivery.mapper_interfaces.ProductJoinCompanyMapper;
 import com.project.food_delivery.mapper_interfaces.ProductMetadataMapper;
@@ -21,20 +22,23 @@
     private final ProductMetadataMapper productMetadataMapper;
     private final CompanyMapper companyMapper;
     @Override
-    public List<ProductJoinCompanyDTO> findProductInformationByProductCategory(String category) {
+    public List<ProductJoinCompanyDto> findProductInformationByProductCategory(String category) {
         List<ProductsJoinCompanies> productsJoinCompanies = productJoinCompanyRepository.findAllByProductMetadata_ProductCategory_ProductCategory(category);
+        if (productsJoinCompanies.isEmpty()){
+            throw new ApiRequestExceptionNotFound("Requested data is not found");
+        }
         return productsJoinCompanies.stream().map(productJoinCompanyMapper::productJoinCompanyToDTO).toList();
     }
 
     @Override
-    public void addNewInformation(CompanyDTO companyDTO, ProductMetadataDTO productMetadataDTO) {
+    public void addNewInformation(CompanyDto companyDTO, ProductMetadataDto productMetadataDTO) {
         productJoinCompanyRepository.save(new ProductsJoinCompanies(
                 productMetadataMapper.productMetadataToModel(productMetadataDTO),
                 companyMapper.companyDTOToModel(companyDTO)));
     }
 
     @Override
-    public boolean isDataExists(CompanyDTO companyDTO, ProductMetadataDTO productMetadataDTO) {
+    public boolean isDataExists(CompanyDto companyDTO, ProductMetadataDto productMetadataDTO) {
         List<ProductsJoinCompanies> productsJoinCompanies = productJoinCompanyRepository
                 .findAllByProductMetadata(productMetadataMapper.productMetadataToModel(productMetadataDTO));
         boolean isFound = false;
Index: src/main/java/com/project/food_delivery/services/ProductJoinCompanyService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.services;\r\n\r\nimport com.project.food_delivery.dtos.CompanyDTO;\r\nimport com.project.food_delivery.dtos.ProductJoinCompanyDTO;\r\nimport com.project.food_delivery.dtos.ProductMetadataDTO;\r\n\r\nimport java.util.List;\r\n\r\npublic interface ProductJoinCompanyService {\r\n    List<ProductJoinCompanyDTO> findProductInformationByProductCategory(String category);\r\n    void addNewInformation(CompanyDTO companyDTO, ProductMetadataDTO productMetadataDTO);\r\n    boolean isDataExists(CompanyDTO companyDTO, ProductMetadataDTO productMetadataDTO);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/services/ProductJoinCompanyService.java b/src/main/java/com/project/food_delivery/services/ProductJoinCompanyService.java
--- a/src/main/java/com/project/food_delivery/services/ProductJoinCompanyService.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/services/ProductJoinCompanyService.java	(date 1695813476431)
@@ -1,13 +1,13 @@
 package com.project.food_delivery.services;
 
-import com.project.food_delivery.dtos.CompanyDTO;
-import com.project.food_delivery.dtos.ProductJoinCompanyDTO;
-import com.project.food_delivery.dtos.ProductMetadataDTO;
+import com.project.food_delivery.dtos.CompanyDto;
+import com.project.food_delivery.dtos.ProductJoinCompanyDto;
+import com.project.food_delivery.dtos.ProductMetadataDto;
 
 import java.util.List;
 
 public interface ProductJoinCompanyService {
-    List<ProductJoinCompanyDTO> findProductInformationByProductCategory(String category);
-    void addNewInformation(CompanyDTO companyDTO, ProductMetadataDTO productMetadataDTO);
-    boolean isDataExists(CompanyDTO companyDTO, ProductMetadataDTO productMetadataDTO);
+    List<ProductJoinCompanyDto> findProductInformationByProductCategory(String category);
+    void addNewInformation(CompanyDto companyDTO, ProductMetadataDto productMetadataDTO);
+    boolean isDataExists(CompanyDto companyDTO, ProductMetadataDto productMetadataDTO);
 }
Index: src/main/java/com/project/food_delivery/mapper_interfaces/ProductJoinCompanyMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.mapper_interfaces;\r\n\r\nimport com.project.food_delivery.dtos.CompanyDTO;\r\nimport com.project.food_delivery.dtos.ProductJoinCompanyDTO;\r\nimport com.project.food_delivery.dtos.ProductMetadataDTO;\r\nimport com.project.food_delivery.models.ProductsJoinCompanies;\r\nimport org.mapstruct.Mapper;\r\nimport org.mapstruct.factory.Mappers;\r\n\r\n@Mapper(componentModel = \"spring\", uses = {ProductMetadataDTO.class, CompanyDTO.class})\r\npublic interface ProductJoinCompanyMapper {\r\n    ProductJoinCompanyDTO productJoinCompanyToDTO(ProductsJoinCompanies productsJoinCompanies);\r\n    ProductsJoinCompanies productJoinCompanyDTOToModel(ProductJoinCompanyDTO productJoinCompanyDTO);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/mapper_interfaces/ProductJoinCompanyMapper.java b/src/main/java/com/project/food_delivery/mapper_interfaces/ProductJoinCompanyMapper.java
--- a/src/main/java/com/project/food_delivery/mapper_interfaces/ProductJoinCompanyMapper.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/mapper_interfaces/ProductJoinCompanyMapper.java	(date 1695813475939)
@@ -1,14 +1,13 @@
 package com.project.food_delivery.mapper_interfaces;
 
-import com.project.food_delivery.dtos.CompanyDTO;
-import com.project.food_delivery.dtos.ProductJoinCompanyDTO;
-import com.project.food_delivery.dtos.ProductMetadataDTO;
+import com.project.food_delivery.dtos.CompanyDto;
+import com.project.food_delivery.dtos.ProductJoinCompanyDto;
+import com.project.food_delivery.dtos.ProductMetadataDto;
 import com.project.food_delivery.models.ProductsJoinCompanies;
 import org.mapstruct.Mapper;
-import org.mapstruct.factory.Mappers;
 
-@Mapper(componentModel = "spring", uses = {ProductMetadataDTO.class, CompanyDTO.class})
+@Mapper(componentModel = "spring", uses = {ProductMetadataDto.class, CompanyDto.class})
 public interface ProductJoinCompanyMapper {
-    ProductJoinCompanyDTO productJoinCompanyToDTO(ProductsJoinCompanies productsJoinCompanies);
-    ProductsJoinCompanies productJoinCompanyDTOToModel(ProductJoinCompanyDTO productJoinCompanyDTO);
+    ProductJoinCompanyDto productJoinCompanyToDTO(ProductsJoinCompanies productsJoinCompanies);
+    ProductsJoinCompanies productJoinCompanyDTOToModel(ProductJoinCompanyDto productJoinCompanyDTO);
 }
Index: src/main/java/com/project/food_delivery/mapper_interfaces/CompanyMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.mapper_interfaces;\r\n\r\nimport com.project.food_delivery.dtos.CompanyDTO;\r\nimport com.project.food_delivery.models.Company;\r\nimport org.mapstruct.Mapper;\r\nimport org.mapstruct.factory.Mappers;\r\n\r\n@Mapper(componentModel = \"spring\")\r\npublic interface CompanyMapper {\r\n    CompanyDTO companyToDTO(Company company);\r\n    Company companyDTOToModel(CompanyDTO companyDTO);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/mapper_interfaces/CompanyMapper.java b/src/main/java/com/project/food_delivery/mapper_interfaces/CompanyMapper.java
--- a/src/main/java/com/project/food_delivery/mapper_interfaces/CompanyMapper.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/mapper_interfaces/CompanyMapper.java	(date 1695813475932)
@@ -1,12 +1,11 @@
 package com.project.food_delivery.mapper_interfaces;
 
-import com.project.food_delivery.dtos.CompanyDTO;
+import com.project.food_delivery.dtos.CompanyDto;
 import com.project.food_delivery.models.Company;
 import org.mapstruct.Mapper;
-import org.mapstruct.factory.Mappers;
 
 @Mapper(componentModel = "spring")
 public interface CompanyMapper {
-    CompanyDTO companyToDTO(Company company);
-    Company companyDTOToModel(CompanyDTO companyDTO);
+    CompanyDto companyToDTO(Company company);
+    Company companyDTOToModel(CompanyDto companyDTO);
 }
Index: src/main/java/com/project/food_delivery/mapper_interfaces/ProductMetadataMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.mapper_interfaces;\r\n\r\nimport com.project.food_delivery.dtos.ProductMetadataDTO;\r\nimport com.project.food_delivery.models.ProductMetadata;\r\nimport org.mapstruct.Mapper;\r\nimport org.mapstruct.factory.Mappers;\r\n\r\n@Mapper(componentModel = \"spring\", uses = {ProductCharacteristicMapper.class, ProductCategoryMapper.class})\r\npublic interface ProductMetadataMapper {\r\n    ProductMetadataDTO productMetadataToDTO(ProductMetadata productMetadata);\r\n    ProductMetadata productMetadataToModel(ProductMetadataDTO productMetadataDTO);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/mapper_interfaces/ProductMetadataMapper.java b/src/main/java/com/project/food_delivery/mapper_interfaces/ProductMetadataMapper.java
--- a/src/main/java/com/project/food_delivery/mapper_interfaces/ProductMetadataMapper.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/mapper_interfaces/ProductMetadataMapper.java	(date 1695812507831)
@@ -1,12 +1,11 @@
 package com.project.food_delivery.mapper_interfaces;
 
-import com.project.food_delivery.dtos.ProductMetadataDTO;
+import com.project.food_delivery.dtos.ProductMetadataDto;
 import com.project.food_delivery.models.ProductMetadata;
 import org.mapstruct.Mapper;
-import org.mapstruct.factory.Mappers;
 
 @Mapper(componentModel = "spring", uses = {ProductCharacteristicMapper.class, ProductCategoryMapper.class})
 public interface ProductMetadataMapper {
-    ProductMetadataDTO productMetadataToDTO(ProductMetadata productMetadata);
-    ProductMetadata productMetadataToModel(ProductMetadataDTO productMetadataDTO);
+    ProductMetadataDto productMetadataToDTO(ProductMetadata productMetadata);
+    ProductMetadata productMetadataToModel(ProductMetadataDto productMetadataDTO);
 }
Index: src/main/java/com/project/food_delivery/dtos/ProductMetadataDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.dtos;\r\n\r\nimport lombok.Getter;\r\nimport lombok.Setter;\r\nimport org.springframework.stereotype.Component;\r\n\r\n@Setter\r\n@Getter\r\n@Component\r\npublic class ProductMetadataDTO {\r\n    private String name;\r\n    private ProductCategoryDTO productCategory;\r\n    private ProductCharacteristicDTO productCharacteristic;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/dtos/ProductMetadataDTO.java b/src/main/java/com/project/food_delivery/dtos/ProductMetadataDto.java
rename from src/main/java/com/project/food_delivery/dtos/ProductMetadataDTO.java
rename to src/main/java/com/project/food_delivery/dtos/ProductMetadataDto.java
--- a/src/main/java/com/project/food_delivery/dtos/ProductMetadataDTO.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/dtos/ProductMetadataDto.java	(date 1695813475976)
@@ -1,14 +1,12 @@
 package com.project.food_delivery.dtos;
 
-import lombok.Getter;
-import lombok.Setter;
+import lombok.Data;
 import org.springframework.stereotype.Component;
 
-@Setter
-@Getter
+@Data
 @Component
-public class ProductMetadataDTO {
+public class ProductMetadataDto {
     private String name;
-    private ProductCategoryDTO productCategory;
-    private ProductCharacteristicDTO productCharacteristic;
+    private ProductCategoryDto productCategory;
+    private ProductCharacteristicDto productCharacteristic;
 }
Index: src/main/java/com/project/food_delivery/dtos/CompanyDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.dtos;\r\n\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Getter;\r\nimport lombok.Setter;\r\nimport org.springframework.stereotype.Component;\r\n\r\n@Getter\r\n@Setter\r\n@AllArgsConstructor\r\npublic class CompanyDTO {\r\n    private String name;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/dtos/CompanyDTO.java b/src/main/java/com/project/food_delivery/dtos/CompanyDto.java
rename from src/main/java/com/project/food_delivery/dtos/CompanyDTO.java
rename to src/main/java/com/project/food_delivery/dtos/CompanyDto.java
--- a/src/main/java/com/project/food_delivery/dtos/CompanyDTO.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/dtos/CompanyDto.java	(date 1695813476420)
@@ -1,13 +1,11 @@
 package com.project.food_delivery.dtos;
 
 import lombok.AllArgsConstructor;
-import lombok.Getter;
-import lombok.Setter;
-import org.springframework.stereotype.Component;
+import lombok.Data;
 
-@Getter
-@Setter
+
+@Data
 @AllArgsConstructor
-public class CompanyDTO {
+public class CompanyDto {
     private String name;
 }
Index: src/main/java/com/project/food_delivery/mapper_interfaces/ProductCharacteristicMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.mapper_interfaces;\r\n\r\nimport com.project.food_delivery.dtos.ProductCharacteristicDTO;\r\nimport com.project.food_delivery.models.ProductCharacteristic;\r\nimport org.mapstruct.Mapper;\r\nimport org.mapstruct.factory.Mappers;\r\n\r\n@Mapper(componentModel = \"spring\")\r\npublic interface ProductCharacteristicMapper {\r\n    ProductCharacteristicDTO productCharacteristicToDTO(ProductCharacteristic productCharacteristic);\r\n    ProductCharacteristic productCharacteristicDTOToModel(ProductCharacteristicDTO productCharacteristicDTO);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/mapper_interfaces/ProductCharacteristicMapper.java b/src/main/java/com/project/food_delivery/mapper_interfaces/ProductCharacteristicMapper.java
--- a/src/main/java/com/project/food_delivery/mapper_interfaces/ProductCharacteristicMapper.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/mapper_interfaces/ProductCharacteristicMapper.java	(date 1695813476290)
@@ -1,12 +1,11 @@
 package com.project.food_delivery.mapper_interfaces;
 
-import com.project.food_delivery.dtos.ProductCharacteristicDTO;
+import com.project.food_delivery.dtos.ProductCharacteristicDto;
 import com.project.food_delivery.models.ProductCharacteristic;
 import org.mapstruct.Mapper;
-import org.mapstruct.factory.Mappers;
 
 @Mapper(componentModel = "spring")
 public interface ProductCharacteristicMapper {
-    ProductCharacteristicDTO productCharacteristicToDTO(ProductCharacteristic productCharacteristic);
-    ProductCharacteristic productCharacteristicDTOToModel(ProductCharacteristicDTO productCharacteristicDTO);
+    ProductCharacteristicDto productCharacteristicToDTO(ProductCharacteristic productCharacteristic);
+    ProductCharacteristic productCharacteristicDTOToModel(ProductCharacteristicDto productCharacteristicDTO);
 }
Index: src/main/java/com/project/food_delivery/dtos/ProductCharacteristicDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.dtos;\r\n\r\nimport lombok.Getter;\r\nimport lombok.Setter;\r\n\r\n@Setter\r\n@Getter\r\npublic class ProductCharacteristicDTO {\r\n    private Float price;\r\n    private Float weight;\r\n    private Integer availableAmount;\r\n    private String weightMeasurement;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/dtos/ProductCharacteristicDTO.java b/src/main/java/com/project/food_delivery/dtos/ProductCharacteristicDto.java
rename from src/main/java/com/project/food_delivery/dtos/ProductCharacteristicDTO.java
rename to src/main/java/com/project/food_delivery/dtos/ProductCharacteristicDto.java
--- a/src/main/java/com/project/food_delivery/dtos/ProductCharacteristicDTO.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/dtos/ProductCharacteristicDto.java	(date 1695813475841)
@@ -1,13 +1,11 @@
 package com.project.food_delivery.dtos;
 
-import lombok.Getter;
-import lombok.Setter;
+import lombok.Data;
 
-@Setter
-@Getter
-public class ProductCharacteristicDTO {
-    private Float price;
-    private Float weight;
+@Data
+public class ProductCharacteristicDto {
+    private Double price;
+    private Double weight;
     private Integer availableAmount;
     private String weightMeasurement;
 }
Index: src/main/java/com/project/food_delivery/mapper_interfaces/ProductCategoryMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.mapper_interfaces;\r\n\r\nimport com.project.food_delivery.dtos.ProductCategoryDTO;\r\nimport com.project.food_delivery.models.ProductCategory;\r\nimport org.mapstruct.Mapper;\r\nimport org.mapstruct.factory.Mappers;\r\n\r\n@Mapper(componentModel = \"spring\")\r\npublic interface ProductCategoryMapper {\r\n    ProductCategoryDTO productCategoryToDTO(ProductCategory productCategory);\r\n    ProductCategory productCategoryDTOToModel(ProductCategoryDTO productCategoryDTO);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/mapper_interfaces/ProductCategoryMapper.java b/src/main/java/com/project/food_delivery/mapper_interfaces/ProductCategoryMapper.java
--- a/src/main/java/com/project/food_delivery/mapper_interfaces/ProductCategoryMapper.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/mapper_interfaces/ProductCategoryMapper.java	(date 1695813476150)
@@ -1,12 +1,11 @@
 package com.project.food_delivery.mapper_interfaces;
 
-import com.project.food_delivery.dtos.ProductCategoryDTO;
+import com.project.food_delivery.dtos.ProductCategoryDto;
 import com.project.food_delivery.models.ProductCategory;
 import org.mapstruct.Mapper;
-import org.mapstruct.factory.Mappers;
 
 @Mapper(componentModel = "spring")
 public interface ProductCategoryMapper {
-    ProductCategoryDTO productCategoryToDTO(ProductCategory productCategory);
-    ProductCategory productCategoryDTOToModel(ProductCategoryDTO productCategoryDTO);
+    ProductCategoryDto productCategoryToDTO(ProductCategory productCategory);
+    ProductCategory productCategoryDTOToModel(ProductCategoryDto productCategoryDTO);
 }
Index: src/main/java/com/project/food_delivery/dtos/ProductJoinCompanyDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.dtos;\r\n\r\nimport lombok.Getter;\r\nimport lombok.Setter;\r\n\r\n@Getter\r\n@Setter\r\npublic class ProductJoinCompanyDTO {\r\n    private ProductMetadataDTO productMetadata;\r\n    private CompanyDTO company;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/dtos/ProductJoinCompanyDTO.java b/src/main/java/com/project/food_delivery/dtos/ProductJoinCompanyDto.java
rename from src/main/java/com/project/food_delivery/dtos/ProductJoinCompanyDTO.java
rename to src/main/java/com/project/food_delivery/dtos/ProductJoinCompanyDto.java
--- a/src/main/java/com/project/food_delivery/dtos/ProductJoinCompanyDTO.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/dtos/ProductJoinCompanyDto.java	(date 1695813476488)
@@ -1,11 +1,9 @@
 package com.project.food_delivery.dtos;
 
-import lombok.Getter;
-import lombok.Setter;
+import lombok.Data;
 
-@Getter
-@Setter
-public class ProductJoinCompanyDTO {
-    private ProductMetadataDTO productMetadata;
-    private CompanyDTO company;
+@Data
+public class ProductJoinCompanyDto {
+    private ProductMetadataDto productMetadata;
+    private CompanyDto company;
 }
Index: src/main/java/com/project/food_delivery/mapper_interfaces/PlaceJoinAddressMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.mapper_interfaces;\r\n\r\nimport com.project.food_delivery.dtos.AddressDTO;\r\nimport com.project.food_delivery.dtos.PlaceDTO;\r\nimport com.project.food_delivery.dtos.PlaceJoinAddressDTO;\r\nimport com.project.food_delivery.models.PlacesJoinAddresses;\r\nimport org.mapstruct.Mapper;\r\nimport org.mapstruct.factory.Mappers;\r\n\r\n@Mapper(componentModel = \"spring\", uses = {PlaceDTO.class, AddressDTO.class})\r\npublic interface PlaceJoinAddressMapper {\r\n    PlaceJoinAddressDTO placeJoinAddressToDTO(PlacesJoinAddresses placesJoinAddresses);\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/mapper_interfaces/PlaceJoinAddressMapper.java b/src/main/java/com/project/food_delivery/mapper_interfaces/PlaceJoinAddressMapper.java
--- a/src/main/java/com/project/food_delivery/mapper_interfaces/PlaceJoinAddressMapper.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/mapper_interfaces/PlaceJoinAddressMapper.java	(date 1695813475951)
@@ -1,14 +1,13 @@
 package com.project.food_delivery.mapper_interfaces;
 
-import com.project.food_delivery.dtos.AddressDTO;
-import com.project.food_delivery.dtos.PlaceDTO;
-import com.project.food_delivery.dtos.PlaceJoinAddressDTO;
+import com.project.food_delivery.dtos.AddressDto;
+import com.project.food_delivery.dtos.PlaceDto;
+import com.project.food_delivery.dtos.PlaceJoinAddressDto;
 import com.project.food_delivery.models.PlacesJoinAddresses;
 import org.mapstruct.Mapper;
-import org.mapstruct.factory.Mappers;
 
-@Mapper(componentModel = "spring", uses = {PlaceDTO.class, AddressDTO.class})
+@Mapper(componentModel = "spring", uses = {PlaceDto.class, AddressDto.class})
 public interface PlaceJoinAddressMapper {
-    PlaceJoinAddressDTO placeJoinAddressToDTO(PlacesJoinAddresses placesJoinAddresses);
+    PlaceJoinAddressDto placeJoinAddressToDTO(PlacesJoinAddresses placesJoinAddresses);
 
 }
Index: src/main/java/com/project/food_delivery/dtos/PlaceJoinAddressDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.dtos;\r\n\r\nimport lombok.Getter;\r\nimport lombok.Setter;\r\n\r\n@Setter\r\n@Getter\r\npublic class PlaceJoinAddressDTO {\r\n    PlaceDTO place;\r\n    AddressDTO address;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/dtos/PlaceJoinAddressDTO.java b/src/main/java/com/project/food_delivery/dtos/PlaceJoinAddressDto.java
rename from src/main/java/com/project/food_delivery/dtos/PlaceJoinAddressDTO.java
rename to src/main/java/com/project/food_delivery/dtos/PlaceJoinAddressDto.java
--- a/src/main/java/com/project/food_delivery/dtos/PlaceJoinAddressDTO.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/dtos/PlaceJoinAddressDto.java	(date 1695813475914)
@@ -1,11 +1,9 @@
 package com.project.food_delivery.dtos;
 
-import lombok.Getter;
-import lombok.Setter;
+import lombok.Data;
 
-@Setter
-@Getter
-public class PlaceJoinAddressDTO {
-    PlaceDTO place;
-    AddressDTO address;
+@Data
+public class PlaceJoinAddressDto {
+    PlaceDto place;
+    AddressDto address;
 }
Index: src/main/java/com/project/food_delivery/rest_controllers/UserController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.rest_controllers;\r\n\r\nimport com.project.food_delivery.RequestBodies.UsernameAndAddress;\r\nimport com.project.food_delivery.dtos.AddressDTO;\r\nimport com.project.food_delivery.response_bodies.UserInformation;\r\nimport com.project.food_delivery.services.UserJoinAddressService;\r\nimport com.project.food_delivery.services.UserService;\r\nimport lombok.AllArgsConstructor;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\n@RestController\r\n@AllArgsConstructor\r\n@RequestMapping(\"/users\")\r\npublic class UserController {\r\n    private final UserService userService;\r\n    private final UserJoinAddressService userJoinAddressService;\r\n    @GetMapping(\"/{username}\")\r\n    public UserInformation getUserInformationByUsername(@PathVariable(name = \"username\") String username){\r\n        return userJoinAddressService.findUserInformationByUsername(username);\r\n    }\r\n\r\n    @PutMapping(\"/{username}\")\r\n    public AddressDTO changeUserAddressByUsername(@PathVariable(name = \"username\") String username, @RequestBody AddressDTO address\r\n            , @RequestParam(name = \"address_id\") Integer address_id){\r\n        return userJoinAddressService.changeUserAddressByUsername(username, address, address_id);\r\n    }\r\n\r\n    @DeleteMapping(\"/address\")\r\n    public void deleteUserAddressByUsername(@RequestBody UsernameAndAddress usernameAndAddress){\r\n        userJoinAddressService.deleteUserAddressByUsername(usernameAndAddress);\r\n    }\r\n\r\n    @DeleteMapping(\"/{username}\")\r\n    public void deleteUserAccount(@PathVariable(name = \"username\") String username){\r\n        userService.deleteUserAccount(username);\r\n    }\r\n\r\n    @PostMapping(\"/address/{username}\")\r\n    public void addUserAddressByUsername(@PathVariable(name = \"username\") String username, @RequestBody AddressDTO addressDTO){\r\n        userJoinAddressService.addUserAddressByUsername(username, addressDTO);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/rest_controllers/UserController.java b/src/main/java/com/project/food_delivery/rest_controllers/UserController.java
--- a/src/main/java/com/project/food_delivery/rest_controllers/UserController.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/rest_controllers/UserController.java	(date 1695813475849)
@@ -1,8 +1,8 @@
 package com.project.food_delivery.rest_controllers;
 
-import com.project.food_delivery.RequestBodies.UsernameAndAddress;
-import com.project.food_delivery.dtos.AddressDTO;
-import com.project.food_delivery.response_bodies.UserInformation;
+import com.project.food_delivery.dtos.UsernameAndAddressDto;
+import com.project.food_delivery.dtos.AddressDto;
+import com.project.food_delivery.dtos.UserInformationDto;
 import com.project.food_delivery.services.UserJoinAddressService;
 import com.project.food_delivery.services.UserService;
 import lombok.AllArgsConstructor;
@@ -15,18 +15,18 @@
     private final UserService userService;
     private final UserJoinAddressService userJoinAddressService;
     @GetMapping("/{username}")
-    public UserInformation getUserInformationByUsername(@PathVariable(name = "username") String username){
+    public UserInformationDto getUserInformationByUsername(@PathVariable(name = "username") String username){
         return userJoinAddressService.findUserInformationByUsername(username);
     }
 
     @PutMapping("/{username}")
-    public AddressDTO changeUserAddressByUsername(@PathVariable(name = "username") String username, @RequestBody AddressDTO address
+    public AddressDto changeUserAddressByUsername(@PathVariable(name = "username") String username, @RequestBody AddressDto address
             , @RequestParam(name = "address_id") Integer address_id){
         return userJoinAddressService.changeUserAddressByUsername(username, address, address_id);
     }
 
     @DeleteMapping("/address")
-    public void deleteUserAddressByUsername(@RequestBody UsernameAndAddress usernameAndAddress){
+    public void deleteUserAddressByUsername(@RequestBody UsernameAndAddressDto usernameAndAddress){
         userJoinAddressService.deleteUserAddressByUsername(usernameAndAddress);
     }
 
@@ -36,7 +36,7 @@
     }
 
     @PostMapping("/address/{username}")
-    public void addUserAddressByUsername(@PathVariable(name = "username") String username, @RequestBody AddressDTO addressDTO){
+    public void addUserAddressByUsername(@PathVariable(name = "username") String username, @RequestBody AddressDto addressDTO){
         userJoinAddressService.addUserAddressByUsername(username, addressDTO);
     }
 }
Index: src/main/java/com/project/food_delivery/dtos/ProductCategoryDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.dtos;\r\n\r\nimport lombok.Getter;\r\nimport lombok.Setter;\r\n\r\n@Setter\r\n@Getter\r\npublic class ProductCategoryDTO {\r\n    private String productCategory;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/dtos/ProductCategoryDTO.java b/src/main/java/com/project/food_delivery/dtos/ProductCategoryDto.java
rename from src/main/java/com/project/food_delivery/dtos/ProductCategoryDTO.java
rename to src/main/java/com/project/food_delivery/dtos/ProductCategoryDto.java
--- a/src/main/java/com/project/food_delivery/dtos/ProductCategoryDTO.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/dtos/ProductCategoryDto.java	(date 1695813476413)
@@ -1,10 +1,8 @@
 package com.project.food_delivery.dtos;
 
-import lombok.Getter;
-import lombok.Setter;
+import lombok.Data;
 
-@Setter
-@Getter
-public class ProductCategoryDTO {
+@Data
+public class ProductCategoryDto {
     private String productCategory;
 }
Index: src/main/java/com/project/food_delivery/services/PlaceJoinAddressServiceImplements.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.services;\r\n\r\nimport com.project.food_delivery.dtos.AddressDTO;\r\nimport com.project.food_delivery.dtos.PlaceDTO;\r\nimport com.project.food_delivery.dtos.PlaceJoinAddressDTO;\r\nimport com.project.food_delivery.mapper_interfaces.AddressMapper;\r\nimport com.project.food_delivery.mapper_interfaces.PlaceJoinAddressMapper;\r\nimport com.project.food_delivery.mapper_interfaces.PlaceMapper;\r\nimport com.project.food_delivery.models.Address;\r\nimport com.project.food_delivery.models.Place;\r\nimport com.project.food_delivery.models.PlacesJoinAddresses;\r\nimport com.project.food_delivery.repositories.PlaceJoinAddressRepository;\r\nimport lombok.AllArgsConstructor;\r\nimport org.springframework.stereotype.Service;\r\nimport java.util.List;\r\nimport java.util.concurrent.atomic.AtomicBoolean;\r\n\r\n@Service\r\n@AllArgsConstructor\r\npublic class PlaceJoinAddressServiceImplements implements PlaceJoinAddressService{\r\n    private final PlaceJoinAddressRepository placeJoinAddressRepository;\r\n    private final PlaceMapper placeMapper;\r\n    private final AddressMapper addressMapper;\r\n    private final PlaceJoinAddressMapper placeJoinAddressMapper;\r\n    @Override\r\n    public void addNewData(AddressDTO addressDTO, PlaceDTO placeDTO) {\r\n        Address address = addressMapper.addressDTOToModel(addressDTO);\r\n        Place place = placeMapper.placeDTOToModel(placeDTO);\r\n        List<PlacesJoinAddresses> placesJoinAddresses = placeJoinAddressRepository.findAllByAddress(address);\r\n        AtomicBoolean isFound = new AtomicBoolean(false);\r\n        placesJoinAddresses.forEach(placesJoinAddresses1 -> {\r\n            if (placesJoinAddresses1.getPlace().getName().equals(place.getName())\r\n            && placesJoinAddresses1.getPlace().getPlaceCategory().getPlaceCategory()\r\n                    .equals(place.getPlaceCategory().getPlaceCategory())){\r\n                isFound.set(true);\r\n            }\r\n        });\r\n        if (!isFound.get()){\r\n            placeJoinAddressRepository.save(new PlacesJoinAddresses(place, address));\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public List<PlaceJoinAddressDTO> findAllByCity(String city) {\r\n        List<PlacesJoinAddresses> placesJoinAddresses = placeJoinAddressRepository.findAllByAddress_City(city);\r\n        if (!placesJoinAddresses.isEmpty()){\r\n            return placesJoinAddresses.stream().map(placeJoinAddressMapper::placeJoinAddressToDTO).toList();\r\n        }else {\r\n            //will be handler exception\r\n        }\r\n        return placesJoinAddresses.stream().map(placeJoinAddressMapper::placeJoinAddressToDTO).toList();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/services/PlaceJoinAddressServiceImplements.java b/src/main/java/com/project/food_delivery/services/PlaceJoinAddressServiceImplements.java
--- a/src/main/java/com/project/food_delivery/services/PlaceJoinAddressServiceImplements.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/services/PlaceJoinAddressServiceImplements.java	(date 1695813476180)
@@ -1,8 +1,9 @@
 package com.project.food_delivery.services;
 
-import com.project.food_delivery.dtos.AddressDTO;
-import com.project.food_delivery.dtos.PlaceDTO;
-import com.project.food_delivery.dtos.PlaceJoinAddressDTO;
+import com.project.food_delivery.dtos.AddressDto;
+import com.project.food_delivery.dtos.PlaceDto;
+import com.project.food_delivery.dtos.PlaceJoinAddressDto;
+import com.project.food_delivery.exceptions.ApiRequestExceptionNotFound;
 import com.project.food_delivery.mapper_interfaces.AddressMapper;
 import com.project.food_delivery.mapper_interfaces.PlaceJoinAddressMapper;
 import com.project.food_delivery.mapper_interfaces.PlaceMapper;
@@ -23,7 +24,7 @@
     private final AddressMapper addressMapper;
     private final PlaceJoinAddressMapper placeJoinAddressMapper;
     @Override
-    public void addNewData(AddressDTO addressDTO, PlaceDTO placeDTO) {
+    public void addNewData(AddressDto addressDTO, PlaceDto placeDTO) {
         Address address = addressMapper.addressDTOToModel(addressDTO);
         Place place = placeMapper.placeDTOToModel(placeDTO);
         List<PlacesJoinAddresses> placesJoinAddresses = placeJoinAddressRepository.findAllByAddress(address);
@@ -41,13 +42,12 @@
     }
 
     @Override
-    public List<PlaceJoinAddressDTO> findAllByCity(String city) {
+    public List<PlaceJoinAddressDto> findAllByCity(String city) {
         List<PlacesJoinAddresses> placesJoinAddresses = placeJoinAddressRepository.findAllByAddress_City(city);
         if (!placesJoinAddresses.isEmpty()){
             return placesJoinAddresses.stream().map(placeJoinAddressMapper::placeJoinAddressToDTO).toList();
         }else {
-            //will be handler exception
+            throw new ApiRequestExceptionNotFound("In this city we don't do food delivery");
         }
-        return placesJoinAddresses.stream().map(placeJoinAddressMapper::placeJoinAddressToDTO).toList();
     }
 }
Index: src/main/java/com/project/food_delivery/services/PlaceJoinAddressService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.services;\r\n\r\nimport com.project.food_delivery.dtos.AddressDTO;\r\nimport com.project.food_delivery.dtos.PlaceDTO;\r\nimport com.project.food_delivery.dtos.PlaceJoinAddressDTO;\r\nimport com.project.food_delivery.models.PlacesJoinAddresses;\r\n\r\nimport java.util.List;\r\n\r\npublic interface PlaceJoinAddressService {\r\n    void addNewData(AddressDTO addressDTO, PlaceDTO placeDTO);\r\n    List<PlaceJoinAddressDTO> findAllByCity(String city);\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/services/PlaceJoinAddressService.java b/src/main/java/com/project/food_delivery/services/PlaceJoinAddressService.java
--- a/src/main/java/com/project/food_delivery/services/PlaceJoinAddressService.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/services/PlaceJoinAddressService.java	(date 1695813476338)
@@ -1,14 +1,13 @@
 package com.project.food_delivery.services;
 
-import com.project.food_delivery.dtos.AddressDTO;
-import com.project.food_delivery.dtos.PlaceDTO;
-import com.project.food_delivery.dtos.PlaceJoinAddressDTO;
-import com.project.food_delivery.models.PlacesJoinAddresses;
+import com.project.food_delivery.dtos.AddressDto;
+import com.project.food_delivery.dtos.PlaceDto;
+import com.project.food_delivery.dtos.PlaceJoinAddressDto;
 
 import java.util.List;
 
 public interface PlaceJoinAddressService {
-    void addNewData(AddressDTO addressDTO, PlaceDTO placeDTO);
-    List<PlaceJoinAddressDTO> findAllByCity(String city);
+    void addNewData(AddressDto addressDTO, PlaceDto placeDTO);
+    List<PlaceJoinAddressDto> findAllByCity(String city);
 
 }
Index: src/main/java/com/project/food_delivery/rest_controllers/PlaceController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.rest_controllers;\r\n\r\nimport com.project.food_delivery.RequestBodies.PlaceData;\r\nimport com.project.food_delivery.dtos.PlaceDTO;\r\nimport com.project.food_delivery.services.PlaceService;\r\nimport lombok.AllArgsConstructor;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport java.util.List;\r\n\r\n@RestController\r\n@AllArgsConstructor\r\n@RequestMapping(\"/places\")\r\npublic class PlaceController {\r\n    private final PlaceService placeService;\r\n    @GetMapping(\"?place-category='category'\")\r\n    @ResponseStatus(HttpStatus.OK)\r\n    public List<PlaceDTO> getPlacesByPlaceCategory(@RequestParam(name = \"category\") String category){\r\n        return placeService.getPlacesByPlaceCategory(category);\r\n    }\r\n\r\n    @GetMapping(\"?city='city'\")\r\n    @ResponseStatus(HttpStatus.OK)\r\n    public List<PlaceDTO> getPlacesByCity(@RequestParam(name = \"city\") String city){\r\n        return placeService.getPlacesByCity(city);\r\n    }\r\n\r\n    @PostMapping(\"\")\r\n    @ResponseStatus(HttpStatus.CREATED)\r\n    public void addPlace(@RequestBody PlaceData placeData){\r\n        placeService.addPlace(placeData);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/rest_controllers/PlaceController.java b/src/main/java/com/project/food_delivery/rest_controllers/PlaceController.java
--- a/src/main/java/com/project/food_delivery/rest_controllers/PlaceController.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/rest_controllers/PlaceController.java	(date 1695813476455)
@@ -1,7 +1,7 @@
 package com.project.food_delivery.rest_controllers;
 
-import com.project.food_delivery.RequestBodies.PlaceData;
-import com.project.food_delivery.dtos.PlaceDTO;
+import com.project.food_delivery.dtos.PlaceDataDto;
+import com.project.food_delivery.dtos.PlaceDto;
 import com.project.food_delivery.services.PlaceService;
 import lombok.AllArgsConstructor;
 import org.springframework.http.HttpStatus;
@@ -15,19 +15,19 @@
     private final PlaceService placeService;
     @GetMapping("?place-category='category'")
     @ResponseStatus(HttpStatus.OK)
-    public List<PlaceDTO> getPlacesByPlaceCategory(@RequestParam(name = "category") String category){
+    public List<PlaceDto> getPlacesByPlaceCategory(@RequestParam(name = "category") String category){
         return placeService.getPlacesByPlaceCategory(category);
     }
 
     @GetMapping("?city='city'")
     @ResponseStatus(HttpStatus.OK)
-    public List<PlaceDTO> getPlacesByCity(@RequestParam(name = "city") String city){
+    public List<PlaceDto> getPlacesByCity(@RequestParam(name = "city") String city){
         return placeService.getPlacesByCity(city);
     }
 
     @PostMapping("")
     @ResponseStatus(HttpStatus.CREATED)
-    public void addPlace(@RequestBody PlaceData placeData){
+    public void addPlace(@RequestBody PlaceDataDto placeData){
         placeService.addPlace(placeData);
     }
 }
Index: src/main/java/com/project/food_delivery/dtos/AddressDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.dtos;\r\n\r\nimport lombok.Getter;\r\nimport lombok.Setter;\r\nimport org.springframework.stereotype.Component;\r\n\r\n@Getter\r\n@Setter\r\n@Component\r\npublic class AddressDTO {\r\n    private String city;\r\n\r\n    private String street;\r\n\r\n    private String buildingNum;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/dtos/AddressDTO.java b/src/main/java/com/project/food_delivery/dtos/AddressDto.java
rename from src/main/java/com/project/food_delivery/dtos/AddressDTO.java
rename to src/main/java/com/project/food_delivery/dtos/AddressDto.java
--- a/src/main/java/com/project/food_delivery/dtos/AddressDTO.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/dtos/AddressDto.java	(date 1695813476222)
@@ -1,13 +1,8 @@
 package com.project.food_delivery.dtos;
 
-import lombok.Getter;
-import lombok.Setter;
-import org.springframework.stereotype.Component;
-
-@Getter
-@Setter
-@Component
-public class AddressDTO {
+import lombok.Data;
+@Data
+public class AddressDto {
     private String city;
 
     private String street;
Index: src/main/java/com/project/food_delivery/rest_controllers/PlaceCategoryController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.rest_controllers;\r\n\r\nimport com.project.food_delivery.dtos.PlaceCategoryDTO;\r\nimport com.project.food_delivery.services.PlaceCategoryService;\r\nimport lombok.AllArgsConstructor;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport java.util.List;\r\n\r\n@RestController\r\n@AllArgsConstructor\r\n@RequestMapping(\"/place-categories\")\r\npublic class PlaceCategoryController {\r\n    private final PlaceCategoryService placeCategoryService;\r\n\r\n    @GetMapping(\"\")\r\n    @ResponseStatus(HttpStatus.OK)\r\n    public List<PlaceCategoryDTO> getPlaceCategories(){\r\n        return placeCategoryService.getPlaceCategories();\r\n    }\r\n\r\n    @PostMapping(\"/{place-category}\")\r\n    @ResponseStatus(HttpStatus.CREATED)\r\n    public void addNewPlaceCategory(@PathVariable(name = \"place-category\") String placeCategory){\r\n        placeCategoryService.addPlaceCategory(placeCategory);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/rest_controllers/PlaceCategoryController.java b/src/main/java/com/project/food_delivery/rest_controllers/PlaceCategoryController.java
--- a/src/main/java/com/project/food_delivery/rest_controllers/PlaceCategoryController.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/rest_controllers/PlaceCategoryController.java	(date 1695813476480)
@@ -1,6 +1,6 @@
 package com.project.food_delivery.rest_controllers;
 
-import com.project.food_delivery.dtos.PlaceCategoryDTO;
+import com.project.food_delivery.dtos.PlaceCategoryDto;
 import com.project.food_delivery.services.PlaceCategoryService;
 import lombok.AllArgsConstructor;
 import org.springframework.http.HttpStatus;
@@ -15,7 +15,7 @@
 
     @GetMapping("")
     @ResponseStatus(HttpStatus.OK)
-    public List<PlaceCategoryDTO> getPlaceCategories(){
+    public List<PlaceCategoryDto> getPlaceCategories(){
         return placeCategoryService.getPlaceCategories();
     }
 
Index: src/main/java/com/project/food_delivery/services/AddressService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.services;\r\n\r\nimport com.project.food_delivery.dtos.AddressDTO;\r\n\r\npublic interface AddressService {\r\n    void addNewAddress(AddressDTO addressDTO);\r\n    void deleteAddressById(Integer id);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/services/AddressService.java b/src/main/java/com/project/food_delivery/services/AddressService.java
--- a/src/main/java/com/project/food_delivery/services/AddressService.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/services/AddressService.java	(date 1695813476196)
@@ -1,8 +1,8 @@
 package com.project.food_delivery.services;
 
-import com.project.food_delivery.dtos.AddressDTO;
+import com.project.food_delivery.dtos.AddressDto;
 
 public interface AddressService {
-    void addNewAddress(AddressDTO addressDTO);
+    void addNewAddress(AddressDto addressDTO);
     void deleteAddressById(Integer id);
 }
Index: src/main/java/com/project/food_delivery/rest_controllers/ProductController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.rest_controllers;\r\n\r\nimport com.project.food_delivery.RequestBodies.ProductData;\r\nimport com.project.food_delivery.dtos.ProductJoinCompanyDTO;\r\nimport com.project.food_delivery.services.ProductJoinCompanyService;\r\nimport com.project.food_delivery.services.ProductService;\r\nimport lombok.AllArgsConstructor;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport java.util.List;\r\n\r\n@RestController\r\n@AllArgsConstructor\r\n@RequestMapping(\"/products\")\r\npublic class ProductController {\r\n    private final ProductService productService;\r\n    private final ProductJoinCompanyService productJoinCompanyService;\r\n    @GetMapping(\"\")\r\n    @ResponseStatus(HttpStatus.OK)\r\n    public List<ProductJoinCompanyDTO> getProductsByProductCategory(@RequestParam(name = \"category\") String category){\r\n        return productJoinCompanyService.findProductInformationByProductCategory(category);\r\n    }\r\n\r\n    @PostMapping(\"\")\r\n    @ResponseStatus(HttpStatus.CREATED)\r\n    public void addProduct(@RequestBody ProductData productData){\r\n        productService.addProduct(productData);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/rest_controllers/ProductController.java b/src/main/java/com/project/food_delivery/rest_controllers/ProductController.java
--- a/src/main/java/com/project/food_delivery/rest_controllers/ProductController.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/rest_controllers/ProductController.java	(date 1696256079451)
@@ -1,7 +1,9 @@
 package com.project.food_delivery.rest_controllers;
 
-import com.project.food_delivery.RequestBodies.ProductData;
-import com.project.food_delivery.dtos.ProductJoinCompanyDTO;
+import com.project.food_delivery.dtos.ProductDataDto;
+import com.project.food_delivery.dtos.ProductJoinCompanyDto;
+import com.project.food_delivery.models.ProductMetadata;
+import com.project.food_delivery.repositories.ProductRepository;
 import com.project.food_delivery.services.ProductJoinCompanyService;
 import com.project.food_delivery.services.ProductService;
 import lombok.AllArgsConstructor;
@@ -15,15 +17,23 @@
 public class ProductController {
     private final ProductService productService;
     private final ProductJoinCompanyService productJoinCompanyService;
+    private final ProductRepository productRepository;
     @GetMapping("")
     @ResponseStatus(HttpStatus.OK)
-    public List<ProductJoinCompanyDTO> getProductsByProductCategory(@RequestParam(name = "category") String category){
+    public List<ProductJoinCompanyDto> getProductsByProductCategory(@RequestParam(name = "category") String category){
         return productJoinCompanyService.findProductInformationByProductCategory(category);
     }
 
     @PostMapping("")
     @ResponseStatus(HttpStatus.CREATED)
-    public void addProduct(@RequestBody ProductData productData){
+    public void addProduct(@RequestBody ProductDataDto productData){
         productService.addProduct(productData);
     }
+
+    @GetMapping("/pr")
+    @ResponseStatus(HttpStatus.OK)
+    public ProductMetadata getProduct(){
+        return productRepository.findAll().get(0);
+    }
+
 }
Index: src/main/java/com/project/food_delivery/mapper_interfaces/AddressMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.mapper_interfaces;\r\n\r\nimport com.project.food_delivery.dtos.AddressDTO;\r\nimport com.project.food_delivery.models.Address;\r\nimport org.mapstruct.Mapper;\r\nimport org.mapstruct.factory.Mappers;\r\n\r\n@Mapper(componentModel = \"spring\")\r\npublic interface AddressMapper {\r\n    Address addressDTOToModel(AddressDTO addressDTO);\r\n    AddressDTO addressToDTO(Address address);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/mapper_interfaces/AddressMapper.java b/src/main/java/com/project/food_delivery/mapper_interfaces/AddressMapper.java
--- a/src/main/java/com/project/food_delivery/mapper_interfaces/AddressMapper.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/mapper_interfaces/AddressMapper.java	(date 1695813475818)
@@ -1,12 +1,11 @@
 package com.project.food_delivery.mapper_interfaces;
 
-import com.project.food_delivery.dtos.AddressDTO;
+import com.project.food_delivery.dtos.AddressDto;
 import com.project.food_delivery.models.Address;
 import org.mapstruct.Mapper;
-import org.mapstruct.factory.Mappers;
 
 @Mapper(componentModel = "spring")
 public interface AddressMapper {
-    Address addressDTOToModel(AddressDTO addressDTO);
-    AddressDTO addressToDTO(Address address);
+    Address addressDTOToModel(AddressDto addressDTO);
+    AddressDto addressToDTO(Address address);
 }
Index: src/main/java/com/project/food_delivery/rest_controllers/ProductCategoryController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.rest_controllers;\r\n\r\nimport com.project.food_delivery.RequestBodies.ProductCategoryAndDescription;\r\nimport com.project.food_delivery.dtos.ProductCategoryDTO;\r\nimport com.project.food_delivery.services.ProductCategoryService;\r\nimport lombok.AllArgsConstructor;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport java.util.List;\r\n\r\n@RestController\r\n@AllArgsConstructor\r\n@RequestMapping(\"/product-categories\")\r\npublic class ProductCategoryController {\r\n    private final ProductCategoryService productCategoryService;\r\n    @GetMapping(\"\")\r\n    @ResponseStatus(HttpStatus.OK)\r\n    public List<ProductCategoryDTO> getProductCategories(){\r\n        return productCategoryService.getProductCategories();\r\n    }\r\n\r\n    @PostMapping(\"\")\r\n    @ResponseStatus(HttpStatus.CREATED)\r\n    public void addProductCategory(@RequestBody ProductCategoryAndDescription productCategoryAndDescription){\r\n        productCategoryService.addProductCategory(productCategoryAndDescription);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/rest_controllers/ProductCategoryController.java b/src/main/java/com/project/food_delivery/rest_controllers/ProductCategoryController.java
--- a/src/main/java/com/project/food_delivery/rest_controllers/ProductCategoryController.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/rest_controllers/ProductCategoryController.java	(date 1695813476318)
@@ -1,7 +1,7 @@
 package com.project.food_delivery.rest_controllers;
 
-import com.project.food_delivery.RequestBodies.ProductCategoryAndDescription;
-import com.project.food_delivery.dtos.ProductCategoryDTO;
+import com.project.food_delivery.dtos.ProductCategoryAndDescriptionDto;
+import com.project.food_delivery.dtos.ProductCategoryDto;
 import com.project.food_delivery.services.ProductCategoryService;
 import lombok.AllArgsConstructor;
 import org.springframework.http.HttpStatus;
@@ -15,13 +15,13 @@
     private final ProductCategoryService productCategoryService;
     @GetMapping("")
     @ResponseStatus(HttpStatus.OK)
-    public List<ProductCategoryDTO> getProductCategories(){
+    public List<ProductCategoryDto> getProductCategories(){
         return productCategoryService.getProductCategories();
     }
 
     @PostMapping("")
     @ResponseStatus(HttpStatus.CREATED)
-    public void addProductCategory(@RequestBody ProductCategoryAndDescription productCategoryAndDescription){
+    public void addProductCategory(@RequestBody ProductCategoryAndDescriptionDto productCategoryAndDescription){
         productCategoryService.addProductCategory(productCategoryAndDescription);
     }
 }
Index: src/main/java/com/project/food_delivery/services/AddressServiceImplements.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.services;\r\n\r\nimport com.project.food_delivery.dtos.AddressDTO;\r\nimport com.project.food_delivery.mapper_interfaces.AddressMapper;\r\nimport com.project.food_delivery.models.Address;\r\nimport com.project.food_delivery.repositories.AddressRepository;\r\nimport lombok.AllArgsConstructor;\r\nimport org.springframework.stereotype.Service;\r\n\r\n@Service\r\n@AllArgsConstructor\r\npublic class AddressServiceImplements implements AddressService{\r\n    private final AddressMapper addressMapper;\r\n    private final AddressRepository addressRepository;\r\n    @Override\r\n    public void addNewAddress(AddressDTO addressDTO) {\r\n        Address address = addressMapper.addressDTOToModel(addressDTO);\r\n        if (addressRepository.findByCityAndStreetAndBuildingNum(addressDTO.getCity(),\r\n                addressDTO.getStreet(), addressDTO.getBuildingNum()).isEmpty()){\r\n            addressRepository.save(address);\r\n        }else {\r\n            //will be handler exception\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void deleteAddressById(Integer id) {\r\n        if (addressRepository.findById(id).isPresent()){\r\n            addressRepository.deleteById(id);\r\n        }else {\r\n            //will be handler exception\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/services/AddressServiceImplements.java b/src/main/java/com/project/food_delivery/services/AddressServiceImplements.java
--- a/src/main/java/com/project/food_delivery/services/AddressServiceImplements.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/services/AddressServiceImplements.java	(date 1695813475868)
@@ -1,6 +1,7 @@
 package com.project.food_delivery.services;
 
-import com.project.food_delivery.dtos.AddressDTO;
+import com.project.food_delivery.dtos.AddressDto;
+import com.project.food_delivery.exceptions.ApiRequestExceptionNotFound;
 import com.project.food_delivery.mapper_interfaces.AddressMapper;
 import com.project.food_delivery.models.Address;
 import com.project.food_delivery.repositories.AddressRepository;
@@ -13,13 +14,11 @@
     private final AddressMapper addressMapper;
     private final AddressRepository addressRepository;
     @Override
-    public void addNewAddress(AddressDTO addressDTO) {
+    public void addNewAddress(AddressDto addressDTO) {
         Address address = addressMapper.addressDTOToModel(addressDTO);
         if (addressRepository.findByCityAndStreetAndBuildingNum(addressDTO.getCity(),
                 addressDTO.getStreet(), addressDTO.getBuildingNum()).isEmpty()){
             addressRepository.save(address);
-        }else {
-            //will be handler exception
         }
     }
 
@@ -28,7 +27,7 @@
         if (addressRepository.findById(id).isPresent()){
             addressRepository.deleteById(id);
         }else {
-            //will be handler exception
+            throw new  ApiRequestExceptionNotFound("This address not found");
         }
     }
 }
Index: src/main/java/com/project/food_delivery/services/UserServiceImplements.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.services;\r\n\r\nimport com.project.food_delivery.models.User;\r\nimport com.project.food_delivery.repositories.UserRepository;\r\nimport lombok.AllArgsConstructor;\r\nimport org.springframework.stereotype.Service;\r\n\r\n@Service\r\n@AllArgsConstructor\r\npublic class UserServiceImplements implements UserService{\r\n    private final UserRepository userRepository;\r\n    @Override\r\n    public User getUserByUsername(String username) {\r\n        return userRepository.findByUsername(username).orElseThrow();\r\n    }\r\n\r\n    @Override\r\n    public void deleteUserAccount(String username) {\r\n        if (isUserExists(username)){\r\n            userRepository.deleteByUsername(username);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean isUserExists(String username) {\r\n        return userRepository.findByUsername(username).isPresent();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/services/UserServiceImplements.java b/src/main/java/com/project/food_delivery/services/UserServiceImplements.java
--- a/src/main/java/com/project/food_delivery/services/UserServiceImplements.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/services/UserServiceImplements.java	(date 1695803949302)
@@ -1,23 +1,32 @@
 package com.project.food_delivery.services;
 
+import com.project.food_delivery.exceptions.ApiRequestExceptionNotFound;
 import com.project.food_delivery.models.User;
 import com.project.food_delivery.repositories.UserRepository;
 import lombok.AllArgsConstructor;
 import org.springframework.stereotype.Service;
 
+import java.util.Optional;
+
 @Service
 @AllArgsConstructor
 public class UserServiceImplements implements UserService{
     private final UserRepository userRepository;
     @Override
     public User getUserByUsername(String username) {
-        return userRepository.findByUsername(username).orElseThrow();
+        Optional<User> user = userRepository.findByUsername(username);
+        if (user.isEmpty()){
+            throw new ApiRequestExceptionNotFound("User is not found");
+        }
+        return user.get();
     }
 
     @Override
     public void deleteUserAccount(String username) {
         if (isUserExists(username)){
             userRepository.deleteByUsername(username);
+        }else {
+            throw new ApiRequestExceptionNotFound("User is not found");
         }
     }
 
Index: src/main/java/com/project/food_delivery/services/UserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.services;\r\n\r\nimport com.project.food_delivery.RequestBodies.UsernameAndAddress;\r\nimport com.project.food_delivery.dtos.AddressDTO;\r\nimport com.project.food_delivery.models.Address;\r\nimport com.project.food_delivery.models.User;\r\n\r\npublic interface UserService {\r\n    User getUserByUsername(String username);\r\n    void deleteUserAccount(String username);\r\n    boolean isUserExists(String username);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/services/UserService.java b/src/main/java/com/project/food_delivery/services/UserService.java
--- a/src/main/java/com/project/food_delivery/services/UserService.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/services/UserService.java	(date 1695805716494)
@@ -1,8 +1,5 @@
 package com.project.food_delivery.services;
 
-import com.project.food_delivery.RequestBodies.UsernameAndAddress;
-import com.project.food_delivery.dtos.AddressDTO;
-import com.project.food_delivery.models.Address;
 import com.project.food_delivery.models.User;
 
 public interface UserService {
Index: src/main/java/com/project/food_delivery/mapper_interfaces/PlaceMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.mapper_interfaces;\r\n\r\nimport com.project.food_delivery.dtos.PlaceCategoryDTO;\r\nimport com.project.food_delivery.dtos.PlaceDTO;\r\nimport com.project.food_delivery.models.Place;\r\nimport org.mapstruct.Mapper;\r\nimport org.mapstruct.factory.Mappers;\r\n\r\n@Mapper(componentModel = \"spring\", uses = PlaceCategoryDTO.class)\r\npublic interface PlaceMapper {\r\n    PlaceDTO placeToDTO(Place place);\r\n    Place placeDTOToModel(PlaceDTO placeDTO);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/mapper_interfaces/PlaceMapper.java b/src/main/java/com/project/food_delivery/mapper_interfaces/PlaceMapper.java
--- a/src/main/java/com/project/food_delivery/mapper_interfaces/PlaceMapper.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/mapper_interfaces/PlaceMapper.java	(date 1695813475880)
@@ -1,13 +1,12 @@
 package com.project.food_delivery.mapper_interfaces;
 
-import com.project.food_delivery.dtos.PlaceCategoryDTO;
-import com.project.food_delivery.dtos.PlaceDTO;
+import com.project.food_delivery.dtos.PlaceCategoryDto;
+import com.project.food_delivery.dtos.PlaceDto;
 import com.project.food_delivery.models.Place;
 import org.mapstruct.Mapper;
-import org.mapstruct.factory.Mappers;
 
-@Mapper(componentModel = "spring", uses = PlaceCategoryDTO.class)
+@Mapper(componentModel = "spring", uses = PlaceCategoryDto.class)
 public interface PlaceMapper {
-    PlaceDTO placeToDTO(Place place);
-    Place placeDTOToModel(PlaceDTO placeDTO);
+    PlaceDto placeToDTO(Place place);
+    Place placeDTOToModel(PlaceDto placeDTO);
 }
Index: src/main/java/com/project/food_delivery/services/ProductServiceImplements.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.services;\r\n\r\nimport com.project.food_delivery.RequestBodies.ProductData;\r\nimport com.project.food_delivery.dtos.CompanyDTO;\r\nimport com.project.food_delivery.dtos.ProductMetadataDTO;\r\nimport com.project.food_delivery.models.ProductMetadata;\r\nimport com.project.food_delivery.repositories.ProductRepository;\r\nimport lombok.AllArgsConstructor;\r\nimport org.springframework.stereotype.Service;\r\n\r\n@Service\r\n@AllArgsConstructor\r\npublic class ProductServiceImplements implements ProductService{\r\n    private final ProductRepository productRepository;\r\n    private final CompanyService companyService;\r\n    private final ProductJoinCompanyService productJoinCompanyService;\r\n    @Override\r\n    public void addProduct(ProductData productData) {\r\n        CompanyDTO companyDTO = new CompanyDTO(productData.getCompany());\r\n        ProductMetadataDTO productMetadataDTO = productData.getProductMetadataDTO();\r\n        boolean isFound = productJoinCompanyService.isDataExists(companyDTO, productMetadataDTO);\r\n        if (!isFound){\r\n            productRepository.save(new ProductMetadata());\r\n            companyService.addNewCompanyIfNotExist(companyDTO);\r\n            productJoinCompanyService.addNewInformation(companyDTO, productMetadataDTO);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/services/ProductServiceImplements.java b/src/main/java/com/project/food_delivery/services/ProductServiceImplements.java
--- a/src/main/java/com/project/food_delivery/services/ProductServiceImplements.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/services/ProductServiceImplements.java	(date 1695813475862)
@@ -1,8 +1,9 @@
 package com.project.food_delivery.services;
 
-import com.project.food_delivery.RequestBodies.ProductData;
-import com.project.food_delivery.dtos.CompanyDTO;
-import com.project.food_delivery.dtos.ProductMetadataDTO;
+import com.project.food_delivery.dtos.CompanyDto;
+import com.project.food_delivery.dtos.ProductDataDto;
+import com.project.food_delivery.dtos.ProductMetadataDto;
+import com.project.food_delivery.exceptions.ApiRequestExceptionAlreadyReported;
 import com.project.food_delivery.models.ProductMetadata;
 import com.project.food_delivery.repositories.ProductRepository;
 import lombok.AllArgsConstructor;
@@ -15,14 +16,16 @@
     private final CompanyService companyService;
     private final ProductJoinCompanyService productJoinCompanyService;
     @Override
-    public void addProduct(ProductData productData) {
-        CompanyDTO companyDTO = new CompanyDTO(productData.getCompany());
-        ProductMetadataDTO productMetadataDTO = productData.getProductMetadataDTO();
+    public void addProduct(ProductDataDto productData) {
+        CompanyDto companyDTO = new CompanyDto(productData.getCompany());
+        ProductMetadataDto productMetadataDTO = productData.getProductMetadataDTO();
         boolean isFound = productJoinCompanyService.isDataExists(companyDTO, productMetadataDTO);
         if (!isFound){
             productRepository.save(new ProductMetadata());
             companyService.addNewCompanyIfNotExist(companyDTO);
             productJoinCompanyService.addNewInformation(companyDTO, productMetadataDTO);
+        }else {
+            throw new ApiRequestExceptionAlreadyReported("This data already exists");
         }
     }
 }
Index: src/main/java/com/project/food_delivery/services/ProductService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.services;\r\n\r\nimport com.project.food_delivery.RequestBodies.ProductData;\r\nimport com.project.food_delivery.models.ProductMetadata;\r\n\r\nimport java.util.List;\r\n\r\npublic interface ProductService {\r\n\r\n    void addProduct(ProductData productData);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/services/ProductService.java b/src/main/java/com/project/food_delivery/services/ProductService.java
--- a/src/main/java/com/project/food_delivery/services/ProductService.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/services/ProductService.java	(date 1695813476357)
@@ -1,11 +1,8 @@
 package com.project.food_delivery.services;
 
-import com.project.food_delivery.RequestBodies.ProductData;
-import com.project.food_delivery.models.ProductMetadata;
-
-import java.util.List;
+import com.project.food_delivery.dtos.ProductDataDto;
 
 public interface ProductService {
 
-    void addProduct(ProductData productData);
+    void addProduct(ProductDataDto productData);
 }
Index: src/main/java/com/project/food_delivery/dtos/PlaceDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.dtos;\r\n\r\nimport lombok.Getter;\r\nimport lombok.Setter;\r\nimport org.springframework.stereotype.Component;\r\n\r\n@Setter\r\n@Getter\r\n@Component\r\npublic class PlaceDTO {\r\n    private String name;\r\n    private PlaceCategoryDTO placeCategory;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/dtos/PlaceDTO.java b/src/main/java/com/project/food_delivery/dtos/PlaceDto.java
rename from src/main/java/com/project/food_delivery/dtos/PlaceDTO.java
rename to src/main/java/com/project/food_delivery/dtos/PlaceDto.java
--- a/src/main/java/com/project/food_delivery/dtos/PlaceDTO.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/dtos/PlaceDto.java	(date 1695813476256)
@@ -1,13 +1,11 @@
 package com.project.food_delivery.dtos;
 
-import lombok.Getter;
-import lombok.Setter;
+import lombok.Data;
 import org.springframework.stereotype.Component;
 
-@Setter
-@Getter
+@Data
 @Component
-public class PlaceDTO {
+public class PlaceDto {
     private String name;
-    private PlaceCategoryDTO placeCategory;
+    private PlaceCategoryDto placeCategory;
 }
Index: src/main/java/com/project/food_delivery/services/PlaceServiceImplements.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.services;\r\n\r\nimport com.project.food_delivery.RequestBodies.PlaceData;\r\nimport com.project.food_delivery.dtos.AddressDTO;\r\nimport com.project.food_delivery.dtos.PlaceDTO;\r\nimport com.project.food_delivery.dtos.PlaceJoinAddressDTO;\r\nimport com.project.food_delivery.mapper_interfaces.PlaceMapper;\r\nimport com.project.food_delivery.models.Place;\r\nimport com.project.food_delivery.models.PlaceCategory;\r\nimport com.project.food_delivery.repositories.PlaceRepository;\r\nimport lombok.AllArgsConstructor;\r\nimport org.springframework.stereotype.Service;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\n@Service\r\n@AllArgsConstructor\r\npublic class PlaceServiceImplements implements PlaceService{\r\n    private final PlaceRepository placeRepository;\r\n    private final PlaceCategoryService placeCategoryService;\r\n    private final AddressService addressService;\r\n    private final PlaceJoinAddressService placeJoinAddressService;\r\n    private final PlaceMapper placeMapper;\r\n\r\n    @Override\r\n    public List<PlaceDTO> getPlacesByPlaceCategory(String category) {\r\n        List<Place> places = placeRepository.findAllByPlaceCategoryPlaceCategory(category);\r\n        List<PlaceDTO> placeDTOS = new ArrayList<>();\r\n        if (!places.isEmpty()){\r\n            placeDTOS = places.stream().map(placeMapper::placeToDTO).toList();\r\n        }else {\r\n            //will be handler exception\r\n        }\r\n        return placeDTOS;\r\n    }\r\n\r\n    @Override\r\n    public List<PlaceDTO> getPlacesByCity(String city) {\r\n        List<PlaceJoinAddressDTO> placeJoinAddressDTOS = placeJoinAddressService.findAllByCity(city);\r\n        List<PlaceDTO> placeDTOS = new ArrayList<>();\r\n        if (!placeJoinAddressDTOS.isEmpty()){\r\n            placeDTOS = placeJoinAddressDTOS.stream().map(PlaceJoinAddressDTO::getPlace).toList();\r\n        }else {\r\n            //will be handler exception\r\n        }\r\n        return placeDTOS;\r\n    }\r\n\r\n    @Override\r\n    public void addPlace(PlaceData placeData) {\r\n        PlaceCategory placeCategory = new PlaceCategory(placeData.getPlaceCategory());\r\n        Place place = new Place(placeData.getName(), placeCategory);\r\n        AddressDTO address = placeData.getAddress();\r\n        placeCategoryService.addPlaceCategory(placeData.getPlaceCategory());\r\n        addressService.addNewAddress(address);\r\n        Optional<Place> placeFromDatabase = placeRepository.findByName(placeData.getName());\r\n        if (placeFromDatabase.isEmpty() || placeFromDatabase.get().getPlaceCategory() != placeCategory){\r\n            placeRepository.save(place);\r\n        }else {\r\n            //will be handler exception\r\n        }\r\n        placeJoinAddressService.addNewData(address, placeMapper.placeToDTO(place));\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/services/PlaceServiceImplements.java b/src/main/java/com/project/food_delivery/services/PlaceServiceImplements.java
--- a/src/main/java/com/project/food_delivery/services/PlaceServiceImplements.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/services/PlaceServiceImplements.java	(date 1695813476298)
@@ -1,17 +1,19 @@
 package com.project.food_delivery.services;
 
-import com.project.food_delivery.RequestBodies.PlaceData;
-import com.project.food_delivery.dtos.AddressDTO;
-import com.project.food_delivery.dtos.PlaceDTO;
-import com.project.food_delivery.dtos.PlaceJoinAddressDTO;
+import com.project.food_delivery.dtos.PlaceDataDto;
+import com.project.food_delivery.dtos.AddressDto;
+import com.project.food_delivery.dtos.PlaceDto;
+import com.project.food_delivery.dtos.PlaceJoinAddressDto;
+import com.project.food_delivery.exceptions.ApiRequestExceptionAlreadyReported;
+import com.project.food_delivery.exceptions.ApiRequestExceptionNotFound;
 import com.project.food_delivery.mapper_interfaces.PlaceMapper;
 import com.project.food_delivery.models.Place;
 import com.project.food_delivery.models.PlaceCategory;
 import com.project.food_delivery.repositories.PlaceRepository;
 import lombok.AllArgsConstructor;
 import org.springframework.stereotype.Service;
-import java.util.ArrayList;
 import java.util.List;
+import java.util.Objects;
 import java.util.Optional;
 
 @Service
@@ -24,42 +26,42 @@
     private final PlaceMapper placeMapper;
 
     @Override
-    public List<PlaceDTO> getPlacesByPlaceCategory(String category) {
+    public List<PlaceDto> getPlacesByPlaceCategory(String category) {
         List<Place> places = placeRepository.findAllByPlaceCategoryPlaceCategory(category);
-        List<PlaceDTO> placeDTOS = new ArrayList<>();
+        List<PlaceDto> placeDTOS;
         if (!places.isEmpty()){
             placeDTOS = places.stream().map(placeMapper::placeToDTO).toList();
         }else {
-            //will be handler exception
+            throw new ApiRequestExceptionNotFound("There aren't found places by this category");
         }
         return placeDTOS;
     }
 
     @Override
-    public List<PlaceDTO> getPlacesByCity(String city) {
-        List<PlaceJoinAddressDTO> placeJoinAddressDTOS = placeJoinAddressService.findAllByCity(city);
-        List<PlaceDTO> placeDTOS = new ArrayList<>();
+    public List<PlaceDto> getPlacesByCity(String city) {
+        List<PlaceJoinAddressDto> placeJoinAddressDTOS = placeJoinAddressService.findAllByCity(city);
+        List<PlaceDto> placeDTOS;
         if (!placeJoinAddressDTOS.isEmpty()){
-            placeDTOS = placeJoinAddressDTOS.stream().map(PlaceJoinAddressDTO::getPlace).toList();
-        }else {
-            //will be handler exception
-        }
-        return placeDTOS;
+            placeDTOS = placeJoinAddressDTOS.stream().map(PlaceJoinAddressDto::getPlace).toList();
+            return placeDTOS;
+        }else {
+            throw new ApiRequestExceptionNotFound("There aren't found places in this city");
+        }
     }
 
     @Override
-    public void addPlace(PlaceData placeData) {
+    public void addPlace(PlaceDataDto placeData) {
         PlaceCategory placeCategory = new PlaceCategory(placeData.getPlaceCategory());
-        Place place = new Place(placeData.getName(), placeCategory);
-        AddressDTO address = placeData.getAddress();
-        placeCategoryService.addPlaceCategory(placeData.getPlaceCategory());
-        addressService.addNewAddress(address);
-        Optional<Place> placeFromDatabase = placeRepository.findByName(placeData.getName());
-        if (placeFromDatabase.isEmpty() || placeFromDatabase.get().getPlaceCategory() != placeCategory){
+        Optional<Place> placeFromDatabase = placeRepository.findByName(placeData.getName());
+        if (placeFromDatabase.isEmpty() || !Objects.equals(placeFromDatabase.get().getPlaceCategory(), placeCategory)){
+            Place place = new Place(placeData.getName(), placeCategory);
+            AddressDto address = placeData.getAddress();
+            placeCategoryService.addPlaceCategory(placeData.getPlaceCategory());
+            addressService.addNewAddress(address);
             placeRepository.save(place);
+            placeJoinAddressService.addNewData(address, placeMapper.placeToDTO(place));
         }else {
-            //will be handler exception
+            throw new ApiRequestExceptionAlreadyReported("This place was added before");
         }
-        placeJoinAddressService.addNewData(address, placeMapper.placeToDTO(place));
     }
 }
Index: src/main/java/com/project/food_delivery/services/PlaceService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.services;\r\n\r\nimport com.project.food_delivery.RequestBodies.PlaceData;\r\nimport com.project.food_delivery.dtos.PlaceDTO;\r\nimport java.util.List;\r\n\r\npublic interface PlaceService {\r\n    List<PlaceDTO> getPlacesByPlaceCategory(String category);\r\n\r\n    List<PlaceDTO> getPlacesByCity(String city);\r\n\r\n    void addPlace(PlaceData placeData);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/services/PlaceService.java b/src/main/java/com/project/food_delivery/services/PlaceService.java
--- a/src/main/java/com/project/food_delivery/services/PlaceService.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/services/PlaceService.java	(date 1695813475856)
@@ -1,13 +1,13 @@
 package com.project.food_delivery.services;
 
-import com.project.food_delivery.RequestBodies.PlaceData;
-import com.project.food_delivery.dtos.PlaceDTO;
+import com.project.food_delivery.dtos.PlaceDataDto;
+import com.project.food_delivery.dtos.PlaceDto;
 import java.util.List;
 
 public interface PlaceService {
-    List<PlaceDTO> getPlacesByPlaceCategory(String category);
+    List<PlaceDto> getPlacesByPlaceCategory(String category);
 
-    List<PlaceDTO> getPlacesByCity(String city);
+    List<PlaceDto> getPlacesByCity(String city);
 
-    void addPlace(PlaceData placeData);
+    void addPlace(PlaceDataDto placeData);
 }
Index: src/main/java/com/project/food_delivery/services/ProductCategoryServiceImplements.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.services;\r\n\r\nimport com.project.food_delivery.RequestBodies.ProductCategoryAndDescription;\r\nimport com.project.food_delivery.dtos.ProductCategoryDTO;\r\nimport com.project.food_delivery.mapper_interfaces.ProductCategoryMapper;\r\nimport com.project.food_delivery.models.ProductCategory;\r\nimport com.project.food_delivery.models.ProductCategoryDescription;\r\nimport com.project.food_delivery.repositories.ProductCategoryRepository;\r\nimport lombok.AllArgsConstructor;\r\nimport org.springframework.stereotype.Service;\r\nimport java.util.List;\r\n\r\n@Service\r\n@AllArgsConstructor\r\npublic class ProductCategoryServiceImplements implements ProductCategoryService{\r\n    private final ProductCategoryRepository productCategoryRepository;\r\n    private final ProductCategoryMapper productCategoryMapper;\r\n    private final ProductCategoryDescriptionService productCategoryDescriptionService;\r\n    @Override\r\n    public List<ProductCategoryDTO> getProductCategories() {\r\n        List<ProductCategory> productCategories = productCategoryRepository.findAll();\r\n        return productCategories.stream().map(productCategoryMapper::productCategoryToDTO).toList();\r\n    }\r\n\r\n    @Override\r\n    public void addProductCategory(ProductCategoryAndDescription productCategoryAndDescription) {\r\n        if (productCategoryRepository.findByProductCategory(productCategoryAndDescription.getCategory()).isEmpty()){\r\n            productCategoryDescriptionService.addDescription(productCategoryAndDescription.getDescription());\r\n            productCategoryRepository.save(new ProductCategory(productCategoryAndDescription.getCategory(),\r\n                    new ProductCategoryDescription(productCategoryAndDescription.getDescription())));\r\n        }else {\r\n            //will be handler exception\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/services/ProductCategoryServiceImplements.java b/src/main/java/com/project/food_delivery/services/ProductCategoryServiceImplements.java
--- a/src/main/java/com/project/food_delivery/services/ProductCategoryServiceImplements.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/services/ProductCategoryServiceImplements.java	(date 1695813476373)
@@ -1,7 +1,9 @@
 package com.project.food_delivery.services;
 
-import com.project.food_delivery.RequestBodies.ProductCategoryAndDescription;
-import com.project.food_delivery.dtos.ProductCategoryDTO;
+import com.project.food_delivery.dtos.ProductCategoryAndDescriptionDto;
+import com.project.food_delivery.dtos.ProductCategoryDto;
+import com.project.food_delivery.exceptions.ApiRequestExceptionAlreadyReported;
+import com.project.food_delivery.exceptions.ApiRequestExceptionNotFound;
 import com.project.food_delivery.mapper_interfaces.ProductCategoryMapper;
 import com.project.food_delivery.models.ProductCategory;
 import com.project.food_delivery.models.ProductCategoryDescription;
@@ -17,19 +19,22 @@
     private final ProductCategoryMapper productCategoryMapper;
     private final ProductCategoryDescriptionService productCategoryDescriptionService;
     @Override
-    public List<ProductCategoryDTO> getProductCategories() {
+    public List<ProductCategoryDto> getProductCategories() {
         List<ProductCategory> productCategories = productCategoryRepository.findAll();
+        if (productCategories.isEmpty()){
+            throw new ApiRequestExceptionNotFound("There are no product categories");
+        }
         return productCategories.stream().map(productCategoryMapper::productCategoryToDTO).toList();
     }
 
     @Override
-    public void addProductCategory(ProductCategoryAndDescription productCategoryAndDescription) {
+    public void addProductCategory(ProductCategoryAndDescriptionDto productCategoryAndDescription) {
         if (productCategoryRepository.findByProductCategory(productCategoryAndDescription.getCategory()).isEmpty()){
             productCategoryDescriptionService.addDescription(productCategoryAndDescription.getDescription());
             productCategoryRepository.save(new ProductCategory(productCategoryAndDescription.getCategory(),
                     new ProductCategoryDescription(productCategoryAndDescription.getDescription())));
         }else {
-            //will be handler exception
+            throw new ApiRequestExceptionAlreadyReported("This category was added before to database");
         }
     }
 }
Index: src/main/java/com/project/food_delivery/services/ProductCategoryService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.services;\r\n\r\nimport com.project.food_delivery.RequestBodies.ProductCategoryAndDescription;\r\nimport com.project.food_delivery.dtos.ProductCategoryDTO;\r\n\r\n\r\nimport java.util.List;\r\n\r\npublic interface ProductCategoryService {\r\n    List<ProductCategoryDTO> getProductCategories();\r\n\r\n    void addProductCategory(ProductCategoryAndDescription productCategoryAndDescription);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/services/ProductCategoryService.java b/src/main/java/com/project/food_delivery/services/ProductCategoryService.java
--- a/src/main/java/com/project/food_delivery/services/ProductCategoryService.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/services/ProductCategoryService.java	(date 1695813476393)
@@ -1,13 +1,13 @@
 package com.project.food_delivery.services;
 
-import com.project.food_delivery.RequestBodies.ProductCategoryAndDescription;
-import com.project.food_delivery.dtos.ProductCategoryDTO;
+import com.project.food_delivery.dtos.ProductCategoryAndDescriptionDto;
+import com.project.food_delivery.dtos.ProductCategoryDto;
 
 
 import java.util.List;
 
 public interface ProductCategoryService {
-    List<ProductCategoryDTO> getProductCategories();
+    List<ProductCategoryDto> getProductCategories();
 
-    void addProductCategory(ProductCategoryAndDescription productCategoryAndDescription);
+    void addProductCategory(ProductCategoryAndDescriptionDto productCategoryAndDescription);
 }
Index: src/main/java/com/project/food_delivery/services/OrderServiceImplements.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.services;\r\n\r\nimport com.project.food_delivery.dtos.OrderDto;\r\nimport com.project.food_delivery.mapper_interfaces.OrderMapper;\r\nimport com.project.food_delivery.models.Basket;\r\nimport com.project.food_delivery.models.Order;\r\nimport com.project.food_delivery.models.Status;\r\nimport com.project.food_delivery.models.User;\r\nimport com.project.food_delivery.repositories.OrderRepository;\r\nimport lombok.AllArgsConstructor;\r\nimport org.springframework.stereotype.Service;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\n@Service\r\n@AllArgsConstructor\r\npublic class OrderServiceImplements implements OrderService{\r\n    private final OrderRepository orderRepository;\r\n    private final UserServiceImplements userServiceImplements;\r\n    private final OrderMapper orderMapper;\r\n    @Override\r\n    public List<OrderDto> getListOfOrdersByUsername(String username) {\r\n        User user = userServiceImplements.getUserByUsername(username);\r\n        if (orderRepository.findOrdersByUser(user).isEmpty()){\r\n            //Will be handler exception\r\n        }\r\n        return orderRepository.findOrdersByUser(user).stream().map(orderMapper::orderToDto).toList();\r\n    }\r\n\r\n    @Override\r\n    public void buildNewOrderFromBasket(Basket basket) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public String changeOrderStatus(String status, String orderId) {\r\n        Integer id = Integer.parseInt(orderId);\r\n        List<Status> stringStatuses = Arrays.stream(Status.values()).toList();\r\n        if (stringStatuses.contains(Status.valueOf(status.toUpperCase())) && orderRepository.findById(id).isPresent()){\r\n            Order order = orderRepository.findById(id).get();\r\n            order.setStatus(Status.valueOf(status.toUpperCase()));\r\n            orderRepository.save(order);\r\n            return orderRepository.findById(id).get().getStatus().toString();\r\n        }else {\r\n            //Will be handler exception\r\n        }\r\n        return orderRepository.findById(id).get().getStatus().toString();//will be deleted\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/services/OrderServiceImplements.java b/src/main/java/com/project/food_delivery/services/OrderServiceImplements.java
--- a/src/main/java/com/project/food_delivery/services/OrderServiceImplements.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/services/OrderServiceImplements.java	(date 1695727517760)
@@ -1,6 +1,7 @@
 package com.project.food_delivery.services;
 
 import com.project.food_delivery.dtos.OrderDto;
+import com.project.food_delivery.exceptions.ApiRequestExceptionNotFound;
 import com.project.food_delivery.mapper_interfaces.OrderMapper;
 import com.project.food_delivery.models.Basket;
 import com.project.food_delivery.models.Order;
@@ -22,7 +23,7 @@
     public List<OrderDto> getListOfOrdersByUsername(String username) {
         User user = userServiceImplements.getUserByUsername(username);
         if (orderRepository.findOrdersByUser(user).isEmpty()){
-            //Will be handler exception
+            throw new ApiRequestExceptionNotFound("You don't have orders");
         }
         return orderRepository.findOrdersByUser(user).stream().map(orderMapper::orderToDto).toList();
     }
@@ -42,8 +43,7 @@
             orderRepository.save(order);
             return orderRepository.findById(id).get().getStatus().toString();
         }else {
-            //Will be handler exception
+            throw new ApiRequestExceptionNotFound("This order is not found or you wrote not right status (Please check it)");
         }
-        return orderRepository.findById(id).get().getStatus().toString();//will be deleted
     }
 }
Index: src/main/java/com/project/food_delivery/dtos/PlaceCategoryDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.dtos;\r\n\r\nimport lombok.Getter;\r\nimport lombok.Setter;\r\n\r\n@Setter\r\n@Getter\r\npublic class PlaceCategoryDTO {\r\n    private String placeCategory;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/dtos/PlaceCategoryDTO.java b/src/main/java/com/project/food_delivery/dtos/PlaceCategoryDto.java
rename from src/main/java/com/project/food_delivery/dtos/PlaceCategoryDTO.java
rename to src/main/java/com/project/food_delivery/dtos/PlaceCategoryDto.java
--- a/src/main/java/com/project/food_delivery/dtos/PlaceCategoryDTO.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/dtos/PlaceCategoryDto.java	(date 1695813476268)
@@ -1,10 +1,8 @@
 package com.project.food_delivery.dtos;
 
-import lombok.Getter;
-import lombok.Setter;
+import lombok.Data;
 
-@Setter
-@Getter
-public class PlaceCategoryDTO {
+@Data
+public class PlaceCategoryDto {
     private String placeCategory;
 }
Index: src/main/java/com/project/food_delivery/services/PlaceCategoryServiceImplements.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.services;\r\n\r\nimport com.project.food_delivery.dtos.PlaceCategoryDTO;\r\nimport com.project.food_delivery.mapper_interfaces.PlaceCategoryMapper;\r\nimport com.project.food_delivery.models.PlaceCategory;\r\nimport com.project.food_delivery.repositories.PlaceCategoryRepository;\r\nimport lombok.AllArgsConstructor;\r\nimport org.springframework.stereotype.Service;\r\nimport java.util.List;\r\n\r\n@Service\r\n@AllArgsConstructor\r\npublic class PlaceCategoryServiceImplements implements PlaceCategoryService{\r\n    private final PlaceCategoryRepository placeCategoryRepository;\r\n    private final PlaceCategoryMapper placeCategoryMapper;\r\n\r\n    @Override\r\n    public List<PlaceCategoryDTO> getPlaceCategories() {\r\n        List<PlaceCategory> placeCategories = placeCategoryRepository.findAll();\r\n        return placeCategories.stream().map(placeCategoryMapper::placeCategoryToPlaceCategoryDTO).toList();\r\n    }\r\n\r\n    @Override\r\n    public void addPlaceCategory(String placeCategory) {\r\n        if (placeCategoryRepository.findPlaceCategoryByPlaceCategory(placeCategory).isEmpty()){\r\n            placeCategoryRepository.save(new PlaceCategory(placeCategory));\r\n        }else {\r\n            //will be handler exception\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/services/PlaceCategoryServiceImplements.java b/src/main/java/com/project/food_delivery/services/PlaceCategoryServiceImplements.java
--- a/src/main/java/com/project/food_delivery/services/PlaceCategoryServiceImplements.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/services/PlaceCategoryServiceImplements.java	(date 1695813476514)
@@ -1,6 +1,7 @@
 package com.project.food_delivery.services;
 
-import com.project.food_delivery.dtos.PlaceCategoryDTO;
+import com.project.food_delivery.dtos.PlaceCategoryDto;
+import com.project.food_delivery.exceptions.ApiRequestExceptionNotFound;
 import com.project.food_delivery.mapper_interfaces.PlaceCategoryMapper;
 import com.project.food_delivery.models.PlaceCategory;
 import com.project.food_delivery.repositories.PlaceCategoryRepository;
@@ -15,8 +16,11 @@
     private final PlaceCategoryMapper placeCategoryMapper;
 
     @Override
-    public List<PlaceCategoryDTO> getPlaceCategories() {
+    public List<PlaceCategoryDto> getPlaceCategories() {
         List<PlaceCategory> placeCategories = placeCategoryRepository.findAll();
+        if (placeCategories.isEmpty()){
+            throw new ApiRequestExceptionNotFound("There are no place category");
+        }
         return placeCategories.stream().map(placeCategoryMapper::placeCategoryToPlaceCategoryDTO).toList();
     }
 
@@ -24,8 +28,6 @@
     public void addPlaceCategory(String placeCategory) {
         if (placeCategoryRepository.findPlaceCategoryByPlaceCategory(placeCategory).isEmpty()){
             placeCategoryRepository.save(new PlaceCategory(placeCategory));
-        }else {
-            //will be handler exception
         }
     }
 }
Index: src/main/java/com/project/food_delivery/services/PlaceCategoryService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.services;\r\n\r\nimport com.project.food_delivery.dtos.PlaceCategoryDTO;\r\n\r\nimport java.util.List;\r\n\r\npublic interface PlaceCategoryService {\r\n    List<PlaceCategoryDTO> getPlaceCategories();\r\n\r\n    void addPlaceCategory(String placeCategory);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/services/PlaceCategoryService.java b/src/main/java/com/project/food_delivery/services/PlaceCategoryService.java
--- a/src/main/java/com/project/food_delivery/services/PlaceCategoryService.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/services/PlaceCategoryService.java	(date 1695813475900)
@@ -1,11 +1,11 @@
 package com.project.food_delivery.services;
 
-import com.project.food_delivery.dtos.PlaceCategoryDTO;
+import com.project.food_delivery.dtos.PlaceCategoryDto;
 
 import java.util.List;
 
 public interface PlaceCategoryService {
-    List<PlaceCategoryDTO> getPlaceCategories();
+    List<PlaceCategoryDto> getPlaceCategories();
 
     void addPlaceCategory(String placeCategory);
 }
Index: src/main/java/com/project/food_delivery/mapper_interfaces/PlaceCategoryMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.project.food_delivery.mapper_interfaces;\r\n\r\nimport com.project.food_delivery.dtos.PlaceCategoryDTO;\r\nimport com.project.food_delivery.models.PlaceCategory;\r\nimport org.mapstruct.Mapper;\r\nimport org.mapstruct.factory.Mappers;\r\n\r\n@Mapper(componentModel = \"spring\")\r\npublic interface PlaceCategoryMapper {\r\n    PlaceCategoryDTO placeCategoryToPlaceCategoryDTO(PlaceCategory placeCategory);\r\n    PlaceCategory placeCategoryToModel(PlaceCategoryDTO placeCategoryDTO);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/project/food_delivery/mapper_interfaces/PlaceCategoryMapper.java b/src/main/java/com/project/food_delivery/mapper_interfaces/PlaceCategoryMapper.java
--- a/src/main/java/com/project/food_delivery/mapper_interfaces/PlaceCategoryMapper.java	(revision 11ab8f77a25d70384418e70d48598d7a4922d380)
+++ b/src/main/java/com/project/food_delivery/mapper_interfaces/PlaceCategoryMapper.java	(date 1695813476236)
@@ -1,12 +1,11 @@
 package com.project.food_delivery.mapper_interfaces;
 
-import com.project.food_delivery.dtos.PlaceCategoryDTO;
+import com.project.food_delivery.dtos.PlaceCategoryDto;
 import com.project.food_delivery.models.PlaceCategory;
 import org.mapstruct.Mapper;
-import org.mapstruct.factory.Mappers;
 
 @Mapper(componentModel = "spring")
 public interface PlaceCategoryMapper {
-    PlaceCategoryDTO placeCategoryToPlaceCategoryDTO(PlaceCategory placeCategory);
-    PlaceCategory placeCategoryToModel(PlaceCategoryDTO placeCategoryDTO);
+    PlaceCategoryDto placeCategoryToPlaceCategoryDTO(PlaceCategory placeCategory);
+    PlaceCategory placeCategoryToModel(PlaceCategoryDto placeCategoryDTO);
 }
